{
  "address": "0x9a8A991889F1b237557a82d4E9Bb285AD5C58B39",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registryAddressHolder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapAddressHolder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "positionManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "closedTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintedTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "removed0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "removed1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collectedFee0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collectedFee1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repaid",
          "type": "uint256"
        }
      ],
      "name": "PositionRebalanced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "feeReceiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "positionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "estimatedGasFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct IIdleLiquidityModuleV2.RebalanceInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "feeReceiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "positionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "estimatedGasFee",
              "type": "uint256"
            },
            {
              "internalType": "int24",
              "name": "tickLowerDiff",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "tickUpperDiff",
              "type": "int24"
            }
          ],
          "internalType": "struct IIdleLiquidityModuleV2.RebalanceWithTickDiffsInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "rebalanceWithTickDiffs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registryAddressHolder",
      "outputs": [
        {
          "internalType": "contract IRegistryAddressHolder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapAddressHolder",
      "outputs": [
        {
          "internalType": "contract IUniswapAddressHolder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8c5bc9d219fbce59a9e1b87755c3566ce88653bcdbdb43efd3675aac578ca606",
  "receipt": {
    "to": null,
    "from": "0x764d7bF1A38Cd2b9F87a787aEb13f0acB52fe784",
    "contractAddress": "0x9a8A991889F1b237557a82d4E9Bb285AD5C58B39",
    "transactionIndex": 31,
    "gasUsed": "2887167",
    "logsBloom": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000040000000000000000000000000000000000000008000000000000000000001000000000000000000000000000000000000000000000000000000000000c0000000000100000000000000000000000000000000000000000000000000020000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000100000000000000000000000000000200000000000100000",
    "blockHash": "0x98ad67eda05f093202b46ccf13f03549360d0c830b49c2b0f99e4edcd87f8358",
    "transactionHash": "0x8c5bc9d219fbce59a9e1b87755c3566ce88653bcdbdb43efd3675aac578ca606",
    "logs": [
      {
        "transactionIndex": 31,
        "blockNumber": 50718010,
        "transactionHash": "0x8c5bc9d219fbce59a9e1b87755c3566ce88653bcdbdb43efd3675aac578ca606",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000764d7bf1a38cd2b9f87a787aeb13f0acb52fe784",
          "0x000000000000000000000000b9ede6f94d192073d8eaf85f8db677133d483249"
        ],
        "data": "0x000000000000000000000000000000000000000000000000019a0afcf6ad93b80000000000000000000000000000000000000000000000022aca94f91f44d0000000000000000000000000000000000000000000000000464a51476e2947d294000000000000000000000000000000000000000000000002293089fc28973c480000000000000000000000000000000000000000000000464beb526b1ff5664c",
        "logIndex": 108,
        "blockHash": "0x98ad67eda05f093202b46ccf13f03549360d0c830b49c2b0f99e4edcd87f8358"
      }
    ],
    "blockNumber": 50718010,
    "cumulativeGasUsed": "6415066",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe5b481AFFFbfe1A61d762f42d4c630a5AAD388f9",
    "0x162Ff164B376fB1Fb0Ed657467123b262F25a985"
  ],
  "numDeployments": 2,
  "solcInputHash": "e0f76533d5690c320d962bc474431dde",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryAddressHolder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapAddressHolder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"positionManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"closedTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removed0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removed1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectedFee0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectedFee1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repaid\",\"type\":\"uint256\"}],\"name\":\"PositionRebalanced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedGasFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IIdleLiquidityModuleV2.RebalanceInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedGasFee\",\"type\":\"uint256\"},{\"internalType\":\"int24\",\"name\":\"tickLowerDiff\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpperDiff\",\"type\":\"int24\"}],\"internalType\":\"struct IIdleLiquidityModuleV2.RebalanceWithTickDiffsInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"rebalanceWithTickDiffs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryAddressHolder\",\"outputs\":[{\"internalType\":\"contract IRegistryAddressHolder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapAddressHolder\",\"outputs\":[{\"internalType\":\"contract IUniswapAddressHolder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_registryAddressHolder\":\"address of the registry address holder\",\"_uniswapAddressHolder\":\"address of the uniswap address holder\"}},\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"rebalance((address,address,uint256,uint256))\":{\"params\":{\"input\":\"RebalanceInput struct\"}},\"rebalanceWithTickDiffs((address,address,uint256,uint256,int24,int24))\":{\"params\":{\"input\":\"RebalanceWithTickDiffsInput struct\"}}},\"title\":\"Idle Liquidity Module to manage liquidity for a user position\",\"version\":1},\"userdoc\":{\"events\":{\"PositionRebalanced(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"emitted when a position is rebalanced\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"assing the uniswap address holder to the contract\"},\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"},\"rebalance((address,address,uint256,uint256))\":{\"notice\":\"check if the position is out of range and rebalance it by swapping the tokens as necessary\"},\"rebalanceWithTickDiffs((address,address,uint256,uint256,int24,int24))\":{\"notice\":\"check if the position is out of range and rebalance it by swapping the tokens as necessary and customize lower & upper tick diff\"},\"uniswapAddressHolder()\":{\"notice\":\"uniswap address holder\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/IdleLiquidityModuleV2.sol\":\"IdleLiquidityModuleV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2789dfea2d73182683d637db5729201f6730dae6113030a94c828f8688f38f2f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc82c7d1d732081d9bd23f1555ebdf8f3bc1738bc42c2bfc4b9aa7564d9fa3573\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x4c5617b558186dc4b2b994b18ab9236410cd2dd1d9ad1213bbcca2e1d5321ce8\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\",\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport './LowGasSafeMath.sol';\\nimport './SafeCast.sol';\\n\\nimport './FullMath.sol';\\nimport './UnsafeMath.sol';\\nimport './FixedPoint96.sol';\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            uint256 product;\\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                uint256 denominator = numerator1 + product;\\n                if (denominator >= numerator1)\\n                    // always fits in 160 bits\\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n            }\\n\\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\n        } else {\\n            uint256 product;\\n            // if the product overflows, we know the denominator underflows\\n            // in addition, we must check that the denominator does not underflow\\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n            uint256 denominator = numerator1 - product;\\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                        : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            return uint256(sqrtPX96).add(quotient).toUint160();\\n        } else {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                        : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            require(sqrtPX96 > quotient);\\n            // always fits 160 bits\\n            return uint160(sqrtPX96 - quotient);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we don't pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n        require(sqrtRatioAX96 > 0);\\n\\n        return\\n            roundUp\\n                ? UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                    sqrtRatioAX96\\n                )\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            roundUp\\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        return\\n            liquidity < 0\\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        return\\n            liquidity < 0\\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n}\\n\",\"keccak256\":\"0x4f69701d331d364b69a1cda77cd7b983a0079d36ae0e06b0bb1d64ae56c3705e\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/// @title ERC721 with permit\\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\\ninterface IERC721Permit is IERC721 {\\n    /// @notice The permit typehash used in the permit signature\\n    /// @return The typehash for the permit\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /// @notice The domain separator used in the permit signature\\n    /// @return The domain seperator used in encoding of permit signature\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Approve of a specific token ID for spending by spender via signature\\n    /// @param spender The account that is being approved\\n    /// @param tokenId The ID of the token that is being approved for spending\\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol';\\n\\nimport './IPoolInitializer.sol';\\nimport './IERC721Permit.sol';\\nimport './IPeripheryPayments.sol';\\nimport './IPeripheryImmutableState.sol';\\nimport '../libraries/PoolAddress.sol';\\n\\n/// @title Non-fungible token for positions\\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\\n/// and authorized.\\ninterface INonfungiblePositionManager is\\n    IPoolInitializer,\\n    IPeripheryPayments,\\n    IPeripheryImmutableState,\\n    IERC721Metadata,\\n    IERC721Enumerable,\\n    IERC721Permit\\n{\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0xe1dadc73e60bf05d0b4e0f05bd2847c5783e833cc10352c14763360b13495ee1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Creates and initializes V3 Pools\\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\\n/// require the pool to exist.\\ninterface IPoolInitializer {\\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\\n    /// @param token0 The contract address of token0 of the pool\\n    /// @param token1 The contract address of token1 of the pool\\n    /// @param fee The fee amount of the v3 pool for the specified token pair\\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n}\\n\",\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\\n\\n/// @title Liquidity amount functions\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    /// @notice Downcasts uint256 to uint128\\n    /// @param x The uint258 to be downcasted\\n    /// @return y The passed value, downcasted to uint128\\n    function toUint128(uint256 x) private pure returns (uint128 y) {\\n        require((y = uint128(x)) == x);\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            FullMath.mulDiv(\\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\\n                sqrtRatioBX96 - sqrtRatioAX96,\\n                sqrtRatioBX96\\n            ) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n        } else {\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf149581d28e1c81736dfe72be73ee1301d4945340cc6282fcdd63fe3c85abf24\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        factory,\\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                        POOL_INIT_CODE_HASH\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\"},\"contracts/base/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../interfaces/IMulticall.sol\\\";\\n\\n/// @title Multicall\\n/// @notice Enables calling multiple methods in a single call to the contract\\nabstract contract Multicall is IMulticall {\\n    /// @inheritdoc IMulticall\\n    function multicall(bytes[] calldata data) public payable override returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            if (!success) {\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) revert();\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x880f353dff198f46a9ecd823f797fa8f89c690d3bcb2de1303fb0f1e8e50cd15\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Extended is IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x92a8b60846986893eb7b0c74fad637e71f0472779ea98694bbb954535cc11d25\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Multicall interface\\n/// @notice Enables calling multiple methods in a single call to the contract\\ninterface IMulticall {\\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n    /// @param data The encoded function data for each of the calls to make to this contract\\n    /// @return results The results from each of the calls passed in via data\\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0xa8f9d0061ee730a522dc4bae6bd5cabb3e997e2c5983da183e912bdca93dfa7b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IPositionManager {\\n    enum PositionStatus {\\n        Initial,\\n        Running,\\n        Closed\\n    }\\n    // Initial=0, Running=1, Closed=2\\n    struct PositionInfo {\\n        uint256 tokenId;\\n        address strategyProvider;\\n        bytes16 strategyId;\\n        uint256 amount0Deposited;\\n        uint256 amount1Deposited;\\n        uint256 amount0DepositedUsdValue;\\n        uint256 amount1DepositedUsdValue;\\n        uint256 amount0CollectedFee;\\n        uint256 amount1CollectedFee;\\n        uint256 amount0Leftover;\\n        uint256 amount1Leftover;\\n        int24 tickLowerDiff;\\n        int24 tickUpperDiff;\\n    }\\n\\n    struct PositionSettlement {\\n        uint256 amount0Returned;\\n        uint256 amount1Returned;\\n        uint256 amount0ReturnedUsdValue;\\n        uint256 amount1ReturnedUsdValue;\\n    }\\n\\n    ///@notice get position id counter\\n    ///@return uint256 position id counter\\n    function positionIdCounter() external view returns (uint256);\\n\\n    ///@notice get position status\\n    ///@param positionId ID of the position\\n    ///@return PositionStatus position status\\n    function positionStatus(uint256 positionId) external view returns (PositionStatus);\\n\\n    ///@notice get position settlement\\n    ///@param positionId ID of the position\\n    ///@return positionSettlementInfo PositionSettlement struct\\n    function getPositionSettlement(\\n        uint256 positionId\\n    ) external view returns (PositionSettlement memory positionSettlementInfo);\\n\\n    ///@notice create position\\n    ///@param tokenId ID of the position\\n    ///@param strategyProvider The address of the strategy provider\\n    ///@param strategyId The ID of the strategy\\n    ///@param amount0Deposited The amount of token0 deposited\\n    ///@param amount1Deposited The amount of token1 deposited\\n    ///@param amount0DepositedUsdValue The amount of token0 deposited in USD\\n    ///@param amount1DepositedUsdValue The amount of token1 deposited in USD\\n    ///@param tickLowerDiff difference between the current tick of the position and the provied lower tick\\n    ///@param tickUpperDiff difference between the current tick of the position and the provied upper tick\\n    ///@param amount0Leftover The amount of token0 leftover after rebalance\\n    ///@param amount1Leftover The amount of token1 leftover after rebalance\\n    struct CreatePositionInput {\\n        uint256 tokenId;\\n        address strategyProvider;\\n        bytes16 strategyId;\\n        uint256 amount0Deposited;\\n        uint256 amount1Deposited;\\n        uint256 amount0DepositedUsdValue;\\n        uint256 amount1DepositedUsdValue;\\n        int24 tickLowerDiff;\\n        int24 tickUpperDiff;\\n        uint256 amount0Leftover;\\n        uint256 amount1Leftover;\\n    }\\n\\n    ///@notice create position\\n    ///@param inputs CreatePositionInput struct\\n    ///@return positionId ID of the position\\n    function createPosition(CreatePositionInput calldata inputs) external returns (uint256 positionId);\\n\\n    ///@notice update position total deposit USD value\\n    ///@param positionId ID of the position\\n    ///@param amount0Deposited The amount of token0 deposited\\n    ///@param amount1Deposited The amount of token1 deposited\\n    ///@param amount0DepositedUsdValue The amount of token0 deposited in USD\\n    ///@param amount1DepositedUsdValue The amount of token1 deposited in USD\\n    ///@param amount0Leftover The amount of token0 leftover after increasing liquidity\\n    ///@param amount1Leftover The amount of token1 leftover after increasing liquidity\\n    function middlewareIncreaseLiquidity(\\n        uint256 positionId,\\n        uint256 amount0Deposited,\\n        uint256 amount1Deposited,\\n        uint256 amount0DepositedUsdValue,\\n        uint256 amount1DepositedUsdValue,\\n        uint256 amount0Leftover,\\n        uint256 amount1Leftover\\n    ) external;\\n\\n    ///@notice get positionId from tokenId\\n    ///@param tokenId ID of the position\\n    ///@return positionId ID of the position\\n    function getPositionIdFromTokenId(uint256 tokenId) external view returns (uint256);\\n\\n    ///@notice get position info from positionId\\n    ///@param positionId ID of the position\\n    ///@return positionInfo PositionInfo struct\\n    function getPositionInfo(uint256 positionId) external view returns (PositionInfo memory positionInfo);\\n\\n    ///@notice check if the position is running\\n    ///@param positionId ID of the position\\n    ///@return bool true if the position is running\\n    function isPositionRunning(uint256 positionId) external view returns (bool);\\n\\n    ///@notice middleware function to update position info for rebalance\\n    ///@param positionId ID of the position\\n    ///@param newTokenId ID of the new NFT\\n    ///@param tickLowerDiff The difference between the current tick and the tickLower\\n    ///@param tickUpperDiff The difference between the current tick and the tickUpper\\n    ///@param amount0CollectedFee The amount of token0 collected fee after rebalance\\n    ///@param amount1CollectedFee The amount of token1 collected fee after rebalance\\n    ///@param amount0Leftover The amount of token0 leftover after rebalance\\n    ///@param amount1Leftover The amount of token1 leftover after rebalance\\n    function middlewareRebalance(\\n        uint256 positionId,\\n        uint256 newTokenId,\\n        int24 tickLowerDiff,\\n        int24 tickUpperDiff,\\n        uint256 amount0CollectedFee,\\n        uint256 amount1CollectedFee,\\n        uint256 amount0Leftover,\\n        uint256 amount1Leftover\\n    ) external;\\n\\n    ///@notice struct for middleware withdraw\\n    ///@param positionId ID of the position\\n    ///@param amount0CollectedFee The amount of token0 collected fee after withdrwan\\n    ///@param amount1CollectedFee The amount of token1 collected fee after withdrwan\\n    ///@param amount0Returned The amount of token0 returned after withdrwan\\n    ///@param amount1Returned The amount of token1 returned after withdrwan\\n    ///@param amount0ReturnedUsdValue The amount of token0 returned in USD after withdrwan\\n    ///@param amount1ReturnedUsdValue The amount of token1 returned in USD after withdrwan\\n    struct MiddlewareWithdrawInput {\\n        uint256 positionId;\\n        uint256 amount0CollectedFee;\\n        uint256 amount1CollectedFee;\\n        uint256 amount0Returned;\\n        uint256 amount1Returned;\\n        uint256 amount0ReturnedUsdValue;\\n        uint256 amount1ReturnedUsdValue;\\n    }\\n\\n    ///@notice middleware function to update position info for withdraw\\n    ///@param input MiddlewareWithdrawInput struct\\n    function middlewareWithdraw(MiddlewareWithdrawInput memory input) external;\\n\\n    function setModuleData(uint256 positionId, address moduleAddress, bytes32 data) external;\\n\\n    function getPositionModuleData(uint256 _positionId, address _moduleAddress) external view returns (bytes32 data);\\n\\n    function getOwner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa27995b72b57d2a759ddce385dfac9d0efbe0db113c633a78bd5b2ade9b3d927\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IPositionManagerFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IPositionManagerFactory {\\n    function create() external returns (address);\\n\\n    function userToPositionManager(address _user) external view returns (address);\\n}\\n\",\"keccak256\":\"0xb881cf675d5e8453a56f35d3aa4eaf21479c8915479e51c9aacb6445248c4111\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IRegistry {\\n    ///@notice emitted when governance address is changed\\n    ///@param oldGovernance the old governance address\\n    ///@param newGovernance the new governance address\\n    event GovernanceChanged(address oldGovernance, address newGovernance);\\n\\n    ///@notice emitted when service fee recipient address is changed\\n    ///@param oldServiceFeeRecipient the old service fee recipient address\\n    ///@param newServiceFeeRecipient the new service fee recipient address\\n    event ServiceFeeRecipientChanged(address oldServiceFeeRecipient, address newServiceFeeRecipient);\\n\\n    ///@notice emitted when position manager factory address is changed\\n    ///@param oldPositionManagerFactory the old position manager factory address\\n    ///@param newPositionManagerFactory the new position manager factory address\\n    event PositionManagerFactoryChanged(address oldPositionManagerFactory, address newPositionManagerFactory);\\n\\n    ///@notice emitted when strategy provider wallet factory address is changed\\n    ///@param oldStrategyProviderWalletFactory the old strategy provider wallet factory address\\n    ///@param newStrategyProviderWalletFactory the new strategy provider wallet factory address\\n    event StrategyProviderWalletFactoryChanged(\\n        address oldStrategyProviderWalletFactory,\\n        address newStrategyProviderWalletFactory\\n    );\\n\\n    ///@notice emitted when official account address is changed\\n    ///@param newOfficialAccount the new official account address\\n    event OfficialAccountChanged(address oldOfficialAccount, address newOfficialAccount);\\n\\n    ///@notice emitted when a contract is added to registry\\n    ///@param newContract address of the new contract\\n    ///@param contractId keccak of contract name\\n    event ContractAdded(address newContract, bytes32 contractId);\\n\\n    ///@notice emitted when a contract address is updated\\n    ///@param oldContract address of the contract before update\\n    ///@param newContract address of the contract after update\\n    ///@param contractId keccak of contract name\\n    event ContractChanged(address oldContract, address newContract, bytes32 contractId);\\n\\n    ///@notice emitted when a contract address is removed\\n    ///@param contractAddress address of the removed contract\\n    ///@param contractId keccak of removed contract name\\n    event ContractRemoved(address contractAddress, bytes32 contractId);\\n\\n    ///@notice emitted when a keeper is added to whitelist\\n    ///@param keeper address of the added keeper\\n    event KeeperAdded(address keeper);\\n\\n    ///@notice emitted when a keeper is removed from whitelist\\n    ///@param keeper address of the removed keeper\\n    event KeeperRemoved(address keeper);\\n\\n    ///@notice emitted when a fee tier is activated\\n    ///@param feeTier fee tier activated\\n    event FeeTierActivated(uint24 feeTier);\\n\\n    ///@notice emitted when a fee tier is deactivated\\n    ///@param feeTier fee tier deactivated\\n    event FeeTierDeactivated(uint24 feeTier);\\n\\n    ///@notice emitted when service fee ratio is updated\\n    ///@param licenseAmount license amount to update service fee ratio\\n    ///@param serviceFeeRatio service fee ratio to update\\n    event ServiceFeeRatioUpdated(uint32 licenseAmount, uint32 serviceFeeRatio);\\n\\n    ///@notice emitted when usd value token address is updated\\n    ///@param oldUsdValueTokenAddress the old usd value token address\\n    ///@param newUsdValueTokenAddress the new usd value token address\\n    event UsdValueTokenAddressUpdated(address oldUsdValueTokenAddress, address newUsdValueTokenAddress);\\n\\n    ///@notice emitted when weth9 address is updated\\n    ///@param oldWeth9 the old weth9 address\\n    ///@param newWeth9 the new weth9 address\\n    event Weth9Updated(address oldWeth9, address newWeth9);\\n\\n    ///@notice emitted when max twap deviation is updated\\n    ///@param oldMaxTwapDeviation the old twap deviation\\n    ///@param newMaxTwapDeviation the new twap deviation\\n    event MaxTwapDeviationUpdated(int24 oldMaxTwapDeviation, int24 newMaxTwapDeviation);\\n\\n    ///@notice emitted when twap duration is updated\\n    ///@param oldTwapDuration the old twap duration\\n    ///@param newTwapDuration the new twap duration\\n    event TwapDurationUpdated(uint32 oldTwapDuration, uint32 newTwapDuration);\\n\\n    ///@notice emitted when module data is updated\\n    ///@param id keccak256 of module id string\\n    ///@param contractAddress address of the module\\n    ///@param defaultData default data of the module\\n    event ModuleDataUpdated(bytes32 id, address contractAddress, bytes32 defaultData);\\n\\n    struct Entry {\\n        bytes32 id;\\n        address contractAddress;\\n        bytes32 defaultData;\\n    }\\n\\n    ///@notice check if the fee tier is allowable\\n    ///@param feeTier the fee tier to check\\n    ///@return true if the fee tier is allowable, false otherwise\\n    function isAllowableFeeTier(uint24 feeTier) external view returns (bool);\\n\\n    ///@notice get the list of fee tiers\\n    ///@return array of fee tiers\\n    function getFeeTiers() external view returns (uint24[] memory);\\n\\n    ///@notice get the list of allowable fee tiers\\n    ///@return array of allowable fee tiers\\n    function getAllowableFeeTiers() external view returns (uint24[] memory);\\n\\n    ///@notice return the address of PositionManagerFactory\\n    ///@return address of PositionManagerFactory\\n    function positionManagerFactoryAddress() external view returns (address);\\n\\n    ///@notice return the address of StrategyProviderWalletFactory\\n    ///@return address of StrategyProviderWalletFactory\\n    function strategyProviderWalletFactoryAddress() external view returns (address);\\n\\n    ///@notice return the address of officialAccount\\n    ///@return address of officialAccount\\n    function officialAccount() external view returns (address);\\n\\n    ///@notice return the address of weth9\\n    ///@return address of weth9\\n    function weth9() external view returns (address);\\n\\n    ///@notice return the address of Governance\\n    ///@return address of Governance\\n    function governance() external view returns (address);\\n\\n    ///@notice return the address of recipient of service fee\\n    ///@return address of recipient of service fee\\n    function serviceFeeRecipient() external view returns (address);\\n\\n    ///@notice return the max twap deviation\\n    ///@return int24 max twap deviation\\n    function maxTwapDeviation() external view returns (int24);\\n\\n    ///@notice return the twap duration\\n    ///@return uint32 twap duration\\n    function twapDuration() external view returns (uint32);\\n\\n    ///@notice return the address of USD value token\\n    ///@return address of USD value token\\n    function usdValueTokenAddress() external view returns (address);\\n\\n    ///@notice return the denominator of service fee ratio\\n    ///@return uint32 denominator of service fee ratio\\n    function serviceFeeDenominator() external view returns (uint32);\\n\\n    ///@notice return the address of Governance\\n    ///@return address of Governance\\n    function getModuleKeys() external view returns (bytes32[] memory);\\n\\n    ///@notice checks if the address is whitelisted as a keeper\\n    ///@param _keeper address to check\\n    ///@return bool true if the address is withelisted, false otherwise\\n    function whitelistedKeepers(address _keeper) external view returns (bool);\\n\\n    ///@notice get the module info by id\\n    ///@param _id id of the module\\n    ///@return Entry module info\\n    function getModuleInfo(bytes32 _id) external view returns (Entry memory);\\n\\n    ///@notice check if the module is active\\n    ///@param _contractAddress address of the module\\n    ///@return bool true if the module is active, false otherwise\\n    function activeModule(address _contractAddress) external view returns (bool);\\n\\n    ///@notice get service fee ratio for a given license amount\\n    ///@param _licenseAmount license amount to get service fee ratio\\n    function getServiceFeeRatioFromLicenseAmount(uint32 _licenseAmount) external view returns (uint32 ratio);\\n}\\n\",\"keccak256\":\"0xcfdebc23759b625576394a17289e6690cd5e5d6da8699da8c6d36bcbc25b46ef\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IRegistryAddressHolder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IRegistryAddressHolder {\\n    ///@notice default getter for regitsry address\\n    ///@return address The address of the registry\\n    function registry() external view returns (address);\\n\\n    ///@notice Set the address of registry\\n    ///@param newAddress new address of registry\\n    function setRegistryAddress(address newAddress) external;\\n}\\n\",\"keccak256\":\"0x5eb7fcc946db90f955527b80acaf1dbb7ce4734c215ae6c38220ccf371b70d9d\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IUniswapAddressHolder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IUniswapAddressHolder {\\n    ///@notice default getter for nonfungiblePositionManagerAddress\\n    ///@return address The address of the non fungible position manager\\n    function nonfungiblePositionManagerAddress() external view returns (address);\\n\\n    ///@notice default getter for uniswapV3FactoryAddress\\n    ///@return address The address of the Uniswap V3 factory\\n    function uniswapV3FactoryAddress() external view returns (address);\\n\\n    ///@notice default getter for swapRouterAddress\\n    ///@return address The address of the swap router\\n    function swapRouterAddress() external view returns (address);\\n\\n    ///@notice Set the address of nonfungible position manager\\n    ///@param newAddress new address of nonfungible position manager\\n    function setNonFungibleAddress(address newAddress) external;\\n\\n    ///@notice Set the address of the Uniswap V3 factory\\n    ///@param newAddress new address of the Uniswap V3 factory\\n    function setFactoryAddress(address newAddress) external;\\n\\n    ///@notice Set the address of uniV3 swap router\\n    ///@param newAddress new address of univ3 swap router\\n    function setSwapRouterAddress(address newAddress) external;\\n}\\n\",\"keccak256\":\"0x781c4d8062cd513f4f8d308b0473a3a61975d9d907b8ded998797cfc0ad13e9d\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/actions/IClosePositionOneShot.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IClosePositionOneShot {\\n    ///@notice emitted when a UniswapNFT position is closed in one shot\\n    ///@param positionManager address of PositionManager\\n    ///@param tokenId Id of the closed token\\n    ///@param amount0Collected  uint256 amount of token0 collected\\n    ///@param amount1Collected uint256 amount of token1 collected\\n\\n    event PositionClosed(\\n        address indexed positionManager,\\n        uint256 tokenId,\\n        uint256 amount0Collected,\\n        uint256 amount1Collected\\n    );\\n\\n    struct ClosePositionOneShotInput {\\n        uint256 tokenId;\\n        bool returnTokenToUser;\\n    }\\n\\n    struct ClosePositionOneShotOutput {\\n        uint256 amount0Collected;\\n        uint256 amount1Collected;\\n    }\\n\\n    function closePositionOneShot(\\n        ClosePositionOneShotInput memory input\\n    ) external returns (ClosePositionOneShotOutput memory output);\\n}\\n\",\"keccak256\":\"0xea7e0b59815196ca0d2654ed444caad881f4ad61c6d47b5b5cf749b0929616ba\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/actions/IMint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IMint {\\n    ///@notice emitted when a UniswapNFT is deposited in PositionManager\\n    ///@param positionManager address of PositionManager\\n    ///@param tokenId Id of deposited token\\n    ///@param amount0Deposited token0 amount deposited\\n    ///@param amount1Deposited token1 amount deposited\\n    ///@param amount0Leftover token0 amount leftover\\n    ///@param amount1Leftover token1 amount leftover\\n    event PositionMinted(\\n        address indexed positionManager,\\n        uint256 tokenId,\\n        uint256 amount0Deposited,\\n        uint256 amount1Deposited,\\n        uint256 amount0Leftover,\\n        uint256 amount1Leftover\\n    );\\n\\n    ///@notice struct for input of the mint action\\n    ///@param token0Address address of the first token\\n    ///@param token1Address address of the second token\\n    ///@param fee pool fee level\\n    ///@param tickLower lower tick of the position\\n    ///@param tickUpper upper tick of the position\\n    ///@param amount0Desired amount of first token in position\\n    ///@param amount1Desired amount of second token in position\\n    ///@param isReturnLeftOver if true, return left over tokens to owner of position\\n    struct MintInput {\\n        address token0Address;\\n        address token1Address;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        bool isReturnLeftOver;\\n    }\\n\\n    function mint(\\n        MintInput calldata inputs\\n    ) external returns (uint256 tokenId, uint256 amount0Deposited, uint256 amount1Deposited);\\n}\\n\",\"keccak256\":\"0x1235c93a1e4de8c77b517b10766ea8a4340ee04097dea9abb60d7a101b727cda\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/actions/ISwapToPositionRatio.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface ISwapToPositionRatio {\\n    ///@notice emitted when a positionManager swaps to ratio\\n    ///@param positionManager address of PositionManager\\n    ///@param amount0In token0 amount in\\n    ///@param amount1In token1 amount in\\n    ///@param amount0Out token0 amount out\\n    ///@param amount1Out token1 amount out\\n    event SwappedToPositionRatio(\\n        address indexed positionManager,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out\\n    );\\n\\n    ///@notice input the decoder expects\\n    ///@param token0Address address of first token of the pool\\n    ///@param token1Address address of second token of the pool\\n    ///@param fee fee tier of the pool\\n    ///@param amount0In actual token0 amount to be deposited\\n    ///@param amount1In actual token1 amount to be deposited\\n    ///@param tickLower lower tick of position\\n    ///@param tickUpper upper tick of position\\n    struct SwapToPositionInput {\\n        address token0Address;\\n        address token1Address;\\n        uint24 fee;\\n        uint256 amount0In;\\n        uint256 amount1In;\\n        int24 tickLower;\\n        int24 tickUpper;\\n    }\\n\\n    function swapToPositionRatio(\\n        SwapToPositionInput memory inputs\\n    ) external returns (uint256 amount0Out, uint256 amount1Out);\\n}\\n\",\"keccak256\":\"0xd37486f5a0cbfef2ae427dad9b0170dea4d2945930dd173febec1a32f022517f\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/actions/IWithdrawNativeToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IWithdrawNativeToken {\\n    ///@notice emitted when native token withdrawn\\n    ///@param positionManager address of PositionManager\\n    ///@param receiver address of the receiver\\n    ///@param amount amount of native token withdrawn\\n    event NativeTokenWithdrawn(address indexed positionManager, address receiver, uint256 amount);\\n\\n    ///@notice struct for input of the WithdrawNativeTokenInput action\\n    ///@param amount amount of native token withdrawn\\n    ///@param receiver address of the receiver\\n    struct WithdrawNativeTokenInput {\\n        uint256 amount;\\n        address payable receiver;\\n    }\\n\\n    function withdrawNativeToken(WithdrawNativeTokenInput calldata input) external payable;\\n}\\n\",\"keccak256\":\"0x77db5dea0ab372ee3770a129e76ba4a3e6489b58c83db0822c2db478887e5fdf\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/modules/IIdleLiquidityModuleV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IIdleLiquidityModuleV2 {\\n    ///@notice emitted when a position is rebalanced\\n    ///@param positionManager address of the called position manager\\n    ///@param closedTokenId closed tokenId\\n    ///@param mintedTokenId minted tokenId\\n    ///@param removed0 amount of token0 removed\\n    ///@param removed1 amount of token1 removed\\n    ///@param collectedFee0 amount of token0 collected\\n    ///@param collectedFee1 amount of token1 collected\\n    ///@param repaid amount of repaid\\n\\n    event PositionRebalanced(\\n        address indexed positionManager,\\n        uint256 positionId,\\n        uint256 closedTokenId,\\n        uint256 mintedTokenId,\\n        uint256 removed0,\\n        uint256 removed1,\\n        uint256 collectedFee0,\\n        uint256 collectedFee1,\\n        uint256 repaid\\n    );\\n\\n    ///@notice struct for rebalance input\\n    ///@param userAddress address of the user\\n    ///@param feeReceiver address of the fee receiver\\n    ///@param positionId positionId of the position manager\\n    ///@param estimatedGasFee estimated gas fee for the rebalance\\n    struct RebalanceInput {\\n        address userAddress;\\n        address payable feeReceiver;\\n        uint256 positionId;\\n        uint256 estimatedGasFee;\\n    }\\n\\n    ///@notice struct for rebalance with tick diffs input\\n    ///@param userAddress address of the user\\n    ///@param feeReceiver address of the fee receiver\\n    ///@param positionId positionId of the position manager\\n    ///@param estimatedGasFee estimated gas fee for the rebalance\\n    ///@param tickLowerDiff tick lower diff to use for the rebalance\\n    ///@param tickUpperDiff tick upper diff to use for the rebalance\\n    struct RebalanceWithTickDiffsInput {\\n        address userAddress;\\n        address payable feeReceiver;\\n        uint256 positionId;\\n        uint256 estimatedGasFee;\\n        int24 tickLowerDiff;\\n        int24 tickUpperDiff;\\n    }\\n\\n    ///@notice struct of the close and repay input\\n    ///@param positionManager address of the position manager\\n    ///@param feeReceiver address of the fee receiver\\n    ///@param positionId positionId of the position\\n    ///@param tokenId tokenId of the position\\n    ///@param tickLower new tickLower of the position\\n    ///@param tickUpper new tickUpper of the position\\n\\n    struct _CloseAndRepayRebalanceParams {\\n        address positionManager;\\n        address payable feeReceiver;\\n        uint256 tokenId;\\n        uint256 rebalanceFee;\\n    }\\n\\n    ///@notice struct of the close and repay result\\n    ///@param amount0CollectedFee amount of token0 collected fee\\n    ///@param amount1CollectedFee amount of token1 collected fee\\n    ///@param amount0Removed amount of token0 removed\\n    ///@param amount1Removed amount of token1 removed\\n    struct _CloseAndRepayRebalanceResult {\\n        uint256 amount0CollectedFee;\\n        uint256 amount1CollectedFee;\\n        uint256 amount0Removed;\\n        uint256 amount1Removed;\\n    }\\n\\n    ///@notice struct of the swap and mint input\\n    ///@param positionManager address of the position manager\\n    ///@param tokenId tokenId of the position\\n    ///@param amount0 amount0 to be swapped and mint\\n    ///@param amount1 amount1 to be swapped and mint\\n    ///@param tickLowerDiff diff of tickLower of the position\\n    ///@param tickUpperDiff diff of tickUpper of the position\\n    struct _SwapAndMintParams {\\n        address positionManager;\\n        uint256 tokenId;\\n        uint256 amount0;\\n        uint256 amount1;\\n        int24 tickLowerDiff;\\n        int24 tickUpperDiff;\\n    }\\n\\n    ///@notice struct of the swap and mint result\\n    ///@param newTokenId new tokenId of the position\\n    ///@param amount0Leftover amount0 leftover from the swap\\n    ///@param amount1Leftover amount1 leftover from the swap\\n    struct _SwapAndMintResult {\\n        uint256 newTokenId;\\n        uint256 amount0Leftover;\\n        uint256 amount1Leftover;\\n    }\\n}\\n\",\"keccak256\":\"0x2ad18d78a974272595b36fae308bf186a0e52eb3b478f3932b8c7410761707b7\",\"license\":\"GPL-2.0\"},\"contracts/libraries/MathHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\n\\nlibrary MathHelper {\\n    ///@dev cast uint56 to int24\\n    function fromInt56ToInt24(int56 value) internal pure returns (int24 out) {\\n        require((out = int24(value)) == value, \\\"MH1\\\");\\n    }\\n\\n    ///@dev case uint256 to uint128\\n    function fromUint256ToUint128(uint256 value) internal pure returns (uint128 out) {\\n        require((out = uint128(value)) == value, \\\"MH2\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x98a76d17867903735a22ce9fde4045dd0af028f4b220e92fff7dfe577836f959\",\"license\":\"GPL-2.0\"},\"contracts/libraries/SafeInt24Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title SafeInt24Math\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SafeInt24Math {\\n    int24 private constant _INT_24_MIN = type(int24).min;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int24 a, int24 b) internal pure returns (int24) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT_24_MIN), \\\"SM0\\\");\\n\\n        int24 c = a * b;\\n        require(c / a == b, \\\"SM1\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int24 a, int24 b) internal pure returns (int24) {\\n        require(b != 0, \\\"SM2\\\");\\n        require(!(b == -1 && a == _INT_24_MIN), \\\"SM3\\\");\\n\\n        int24 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int24 a, int24 b) internal pure returns (int24) {\\n        int24 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SM4\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int24 a, int24 b) internal pure returns (int24) {\\n        int24 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SM5\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(int24 a, int24 b) internal pure returns (int24) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xa52f3d0006cc0a5f06f2d58f2378d7d7e75f4cd8f9e074114a4f0d407da902be\",\"license\":\"GPL-2.0\"},\"contracts/libraries/SafeInt56Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title SafeInt56Math\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SafeInt56Math {\\n    int56 private constant _INT_56_MIN = type(int56).min;\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int56 a, int56 b) internal pure returns (int56) {\\n        require(b != 0, 'SM6');\\n        require(!(b == -1 && a == _INT_56_MIN), 'SM7');\\n\\n        int56 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int56 a, int56 b) internal pure returns (int56) {\\n        int56 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), 'SM8');\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xedc139860e9452e532036335720d1c38023e26dc8850cbf1e49bc6c36ac91ee1\",\"license\":\"GPL-2.0\"},\"contracts/libraries/SwapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"../interfaces/IERC20Extended.sol\\\";\\nimport \\\"./SafeInt24Math.sol\\\";\\nimport \\\"./SafeInt56Math.sol\\\";\\nimport \\\"./MathHelper.sol\\\";\\nimport \\\"./UniswapHelper.sol\\\";\\n\\n///@title library to help with swap amounts calculations\\nlibrary SwapHelper {\\n    uint8 internal constant RESOLUTION48 = 48;\\n    uint256 internal constant Q48 = 0x1000000000000;\\n\\n    using SafeInt24Math for int24;\\n    using SafeInt56Math for int56;\\n    using SafeMath for uint256;\\n\\n    ///@notice returns the amount of token1 needed for a mint for 1e18 token0\\n    ///@param sqrtRatioX96 sqrt ratio of the pool\\n    ///@param sqrtRatioAX96 sqrt ratio of lower tick of position\\n    ///@param sqrtRatioBX96 sqrt ratio of upper tick of position\\n    ///@return ratioX96 amount1/amount0 * 2**96\\n    function getRatioFromRange(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96\\n    ) internal pure returns (uint256 ratioX96) {\\n        require(sqrtRatioAX96 < sqrtRatioX96 && sqrtRatioBX96 > sqrtRatioX96, \\\"SHR\\\");\\n        uint128 liquidity = LiquidityAmounts.getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, Q48);\\n        (, ratioX96) = LiquidityAmounts.getAmountsForLiquidity(sqrtRatioX96, sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n    }\\n\\n    ///@notice calculate amount to be swapped in order to deposit according to the ratio selected position needs\\n    ///@param sqrtRatioX96 sqrt ratio of the pool\\n    ///@param tickLower lower tick of position\\n    ///@param tickUpper upper tick of position\\n    ///@param sqrtPriceX96 sqrt price of the pool to swap\\n    ///@param amount0In amount of token0 available\\n    ///@param amount1In amount of token1 available\\n    ///@return amountToSwap amount of token to be swapped\\n    ///@return token0In true if token0 is swapped for token1, false if token1 is swapped for token1\\n    function calcAmountToSwap(\\n        uint160 sqrtRatioX96,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint160 sqrtPriceX96,\\n        uint256 amount0In,\\n        uint256 amount1In\\n    ) internal pure returns (uint256 amountToSwap, bool token0In) {\\n        require(amount0In != 0 || amount1In != 0, \\\"SHA\\\");\\n\\n        uint160 sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(tickLower);\\n        uint160 sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(tickUpper);\\n\\n        //if current price >= tickUpper, then my range is under the current tick, so my position will all be in token1\\n        if (sqrtRatioX96 >= sqrtRatioBX96) {\\n            amountToSwap = amount0In;\\n            token0In = true;\\n        }\\n        //if current price  <= tickUpper, then my range is over the current tick, so my position will all be in token1\\n        else if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amountToSwap = amount1In;\\n            token0In = false;\\n        } else {\\n            uint256 ratioX96 = getRatioFromRange(sqrtRatioX96, sqrtRatioAX96, sqrtRatioBX96);\\n            uint256 valueX96 = (amount0In.mul((uint256(sqrtPriceX96) ** 2) >> FixedPoint96.RESOLUTION)).add(\\n                amount1In << FixedPoint96.RESOLUTION\\n            );\\n\\n            uint256 amount0Post = valueX96.div(\\n                ((uint256(sqrtPriceX96) ** 2) >> FixedPoint96.RESOLUTION).add(ratioX96 << RESOLUTION48)\\n            );\\n            token0In = amount0Post < amount0In;\\n\\n            if (token0In) {\\n                amountToSwap = amount0In.sub(amount0Post);\\n            } else {\\n                amountToSwap = amount1In.sub((amount0Post).mul(ratioX96) >> RESOLUTION48);\\n            }\\n        }\\n    }\\n\\n    ///@notice Check price volatility is under specified threshold. This mitigates price manipulation during rebalance\\n    ///@param pool v3 pool\\n    ///@param maxTwapDeviation max deviation threshold from the twap tick price\\n    ///@param twapDuration duration of the twap oracle observations\\n    function checkDeviation(IUniswapV3Pool pool, int24 maxTwapDeviation, uint32 twapDuration) internal view {\\n        ///NOTE: MAX_TWAP_DEVIATION = 100  # 1% , TWAP_DURATION = 60  # 60 seconds\\n        if (twapDuration == 0) {\\n            //bypass check\\n            return;\\n        }\\n        (, int24 currentTick, , uint16 observationCardinality, , , ) = pool.slot0();\\n        if (observationCardinality == 0) {\\n            //bypass check\\n            return;\\n        }\\n        int24 twap = getTwap(pool, twapDuration);\\n        int24 deviation = currentTick > twap ? currentTick.sub(twap) : twap.sub(currentTick);\\n        require(deviation <= maxTwapDeviation, \\\"SHD\\\");\\n    }\\n\\n    ///@notice Fetch time-weighted average price in ticks from Uniswap pool for specified duration\\n    ///@param pool v3 pool\\n    ///@param twapDuration duration of the twap oracle observations\\n    function getTwap(IUniswapV3Pool pool, uint32 twapDuration) internal view returns (int24) {\\n        require(twapDuration > 0, \\\"SHGT\\\");\\n        uint32[] memory secondsAgo = new uint32[](2);\\n        secondsAgo[0] = twapDuration;\\n        secondsAgo[1] = 0; // 0 is the most recent observation\\n\\n        (int56[] memory tickCumulatives, ) = pool.observe(secondsAgo);\\n\\n        return MathHelper.fromInt56ToInt24(tickCumulatives[1].sub(tickCumulatives[0]).div(int56(twapDuration)));\\n    }\\n\\n    function distributeTargetAmount(\\n        address token0,\\n        address token1,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 price0,\\n        uint256 price1,\\n        uint256 targetAmount\\n    ) internal view returns (uint256 amount0Distributed, uint256 amount1Distributed) {\\n        uint256 denominator = FullMath.mulDiv(amount0, price0, uint256(10 ** (IERC20Extended(token0).decimals()))).add(\\n            FullMath.mulDiv(amount1, price1, uint256(10 ** (IERC20Extended(token1).decimals())))\\n        );\\n\\n        require(denominator >= targetAmount && denominator > 0, \\\"DTA\\\");\\n\\n        amount0Distributed = FullMath.mulDiv(amount0, targetAmount, denominator);\\n        amount1Distributed = FullMath.mulDiv(amount1, targetAmount, denominator);\\n    }\\n\\n    function getPrice(uint160 sqrtPriceX96, address token, address tokenQuote) internal view returns (uint256) {\\n        if (token == tokenQuote) {\\n            return getPriceWithSameToken(token);\\n        }\\n        return\\n            getQuoteFromSqrtRatioX96(sqrtPriceX96, uint128(10 ** IERC20Extended(token).decimals()), token, tokenQuote);\\n    }\\n\\n    function getPriceWithSameToken(address token) internal view returns (uint256) {\\n        return 10 ** IERC20Extended(token).decimals();\\n    }\\n\\n    function getQuoteFromSqrtRatioX96(\\n        uint160 sqrtRatioX96,\\n        uint128 baseAmount,\\n        address baseToken,\\n        address quoteToken\\n    ) internal pure returns (uint256 quoteAmount) {\\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\\n        if (sqrtRatioX96 <= type(uint128).max) {\\n            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\\n            quoteAmount = baseToken < quoteToken\\n                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\\n                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\\n        } else {\\n            uint256 ratioX128 = FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64);\\n            quoteAmount = baseToken < quoteToken\\n                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\\n                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\\n        }\\n    }\\n\\n    function getQuoteFromDeepestPool(\\n        address factoryAddress,\\n        address baseToken,\\n        address quoteToken,\\n        uint256 baseAmount,\\n        uint24[] memory feeTiers\\n    ) internal view returns (uint256 quoteAmount) {\\n        if (baseToken == quoteToken) {\\n            return baseAmount;\\n        }\\n        address deepestPool = UniswapHelper.findV3DeepestPool(factoryAddress, baseToken, quoteToken, feeTiers);\\n\\n        (uint160 sqrtPriceX96, , , , , , ) = IUniswapV3Pool(deepestPool).slot0();\\n\\n        return\\n            getQuoteFromSqrtRatioX96(sqrtPriceX96, MathHelper.fromUint256ToUint128(baseAmount), baseToken, quoteToken);\\n    }\\n}\\n\",\"keccak256\":\"0x005a65be3d703b7cc0e695d95e111c8aefbbb1c926be7e5081594ab003690b68\",\"license\":\"GPL-2.0\"},\"contracts/libraries/UniswapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/libraries/SqrtPriceMath.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\\\";\\nimport \\\"./MathHelper.sol\\\";\\nimport \\\"./SafeInt24Math.sol\\\";\\nimport \\\"./SwapHelper.sol\\\";\\n\\n///@title library to interact with NFT token and do some useful function with it\\nlibrary UniswapHelper {\\n    using SafeInt24Math for int24;\\n\\n    ///@notice get the pool address\\n    ///@param factory address of the UniswapV3Factory\\n    ///@param token0 address of the token0\\n    ///@param token1 address of the token1\\n    ///@param fee fee tier of the pool\\n    ///@return address address of the pool\\n    function getPool(address factory, address token0, address token1, uint24 fee) internal view returns (address) {\\n        address pool = IUniswapV3Factory(factory).getPool(token0, token1, fee);\\n        require(pool != address(0), \\\"UHP0\\\");\\n        return pool;\\n    }\\n\\n    ///@notice struct for output of the getTokens function\\n    ///@param token0 address of the token0\\n    ///@param token1 address of the token1\\n    ///@param fee fee tier of the pool\\n    ///@param tickLower of position\\n    ///@param tickUpper of position\\n    struct getTokensOutput {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n    }\\n\\n    ///@notice get the address of the tpkens from the tokenId\\n    ///@param tokenId id of the position (NFT)\\n    ///@param nonfungiblePositionManager instance of the nonfungiblePositionManager given by the caller (address)\\n    ///@return output getTokensOutput struct\\n    function getTokens(\\n        uint256 tokenId,\\n        INonfungiblePositionManager nonfungiblePositionManager\\n    ) internal view returns (getTokensOutput memory output) {\\n        (\\n            ,\\n            ,\\n            output.token0,\\n            output.token1,\\n            output.fee,\\n            output.tickLower,\\n            output.tickUpper,\\n            ,\\n            ,\\n            ,\\n            ,\\n\\n        ) = nonfungiblePositionManager.positions(tokenId);\\n    }\\n\\n    ///@notice get the amount of tokens from liquidity and tick ranges\\n    ///@param liquidity amount of liquidity to convert\\n    ///@param currentTick current tick\\n    ///@param tickLower lower tick range\\n    ///@param tickUpper upper tick range\\n    ///@param sqrtPriceX96 square root of the price\\n    ///@return amount0 uint256 amount of token0\\n    ///@return amount1 uint256 amount of token1\\n    function getAmountsFromLiquidity(\\n        uint128 liquidity,\\n        int24 currentTick,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint160 sqrtPriceX96\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (currentTick < tickLower) {\\n            // current tick is below the passed range; liquidity can only become in range by crossing from left to\\n            // right, when we'll need _more_ token0 (it's becoming more valuable) so user must provide it\\n            amount0 = SqrtPriceMath.getAmount0Delta(\\n                TickMath.getSqrtRatioAtTick(tickLower),\\n                TickMath.getSqrtRatioAtTick(tickUpper),\\n                liquidity,\\n                true\\n            );\\n        } else if (currentTick < tickUpper) {\\n            amount0 = SqrtPriceMath.getAmount0Delta(\\n                sqrtPriceX96,\\n                TickMath.getSqrtRatioAtTick(tickUpper),\\n                liquidity,\\n                true\\n            );\\n            amount1 = SqrtPriceMath.getAmount1Delta(\\n                TickMath.getSqrtRatioAtTick(tickLower),\\n                sqrtPriceX96,\\n                liquidity,\\n                true\\n            );\\n        } else {\\n            // current tick is above the passed range; liquidity can only become in range by crossing from right to\\n            // left, when we'll need _more_ token1 (it's becoming more valuable) so user must provide it\\n            amount1 = SqrtPriceMath.getAmount1Delta(\\n                TickMath.getSqrtRatioAtTick(tickLower),\\n                TickMath.getSqrtRatioAtTick(tickUpper),\\n                liquidity,\\n                true\\n            );\\n        }\\n    }\\n\\n    ///@notice Computes the amount of liquidity for a given amount of token0, token1\\n    ///@param amount0 The amount of token0 being sent in\\n    ///@param amount1 The amount of token1 being sent in\\n    ///@param tickLower lower tick range\\n    ///@param tickUpper upper tick range\\n    ///@param sqrtRatioX96 square root of the ratio\\n    ///@return liquidity The amount of liquidity received\\n    function getLiquidityFromAmounts(\\n        uint256 amount0,\\n        uint256 amount1,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint160 sqrtRatioX96\\n    ) internal pure returns (uint128 liquidity) {\\n        uint160 sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(tickLower);\\n        uint160 sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(tickUpper);\\n        uint256 amount0Desired = amount0;\\n        uint256 amount1Desired = amount1;\\n\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = LiquidityAmounts.getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0Desired);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            if (amount0Desired == 0) {\\n                liquidity = LiquidityAmounts.getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1Desired);\\n            } else if (amount1Desired == 0) {\\n                liquidity = LiquidityAmounts.getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0Desired);\\n            } else {\\n                uint128 liquidity0 = LiquidityAmounts.getLiquidityForAmount0(\\n                    sqrtRatioX96,\\n                    sqrtRatioBX96,\\n                    amount0Desired\\n                );\\n                uint128 liquidity1 = LiquidityAmounts.getLiquidityForAmount1(\\n                    sqrtRatioAX96,\\n                    sqrtRatioX96,\\n                    amount1Desired\\n                );\\n                liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n            }\\n        } else {\\n            liquidity = LiquidityAmounts.getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1Desired);\\n        }\\n    }\\n\\n    ///@notice Reorder tokens to be in the correct order for the pool\\n    ///@param _token0 address of token0\\n    ///@param _token1 address of token1\\n    ///@return token0 address of token0 after reordering\\n    ///@return token1 address of token1 after reordering\\n    ///@return isOrderChanged bool if the order was changed\\n    function reorderTokens(\\n        address _token0,\\n        address _token1\\n    ) internal pure returns (address token0, address token1, bool isOrderChanged) {\\n        if (_token0 > _token1) {\\n            token0 = _token1;\\n            token1 = _token0;\\n            isOrderChanged = true;\\n        } else {\\n            token0 = _token0;\\n            token1 = _token1;\\n            isOrderChanged = false;\\n        }\\n    }\\n\\n    ///@notice Calculates the liquidity and amounts for a given position\\n    ///@param factory address of the UniswapV3Factory\\n    ///@param token0 address of the token0\\n    ///@param token1 address of the token1\\n    ///@param fee fee tier of the pool\\n    ///@param tickLower the lower bound of position\\n    ///@param tickUpper the upper bound of position\\n    ///@param amount0Desired amount of token0\\n    ///@param amount1Desired amount of token1\\n    function calLiquidityAndAmounts(\\n        address factory,\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint256 amount0Desired,\\n        uint256 amount1Desired\\n    ) internal view returns (uint128 liquidity, uint256 amount0, uint256 amount1) {\\n        address poolAddress = UniswapHelper.getPool(factory, token0, token1, fee);\\n\\n        IUniswapV3Pool pool = IUniswapV3Pool(poolAddress);\\n        (uint160 sqrtRatioX96, int24 tick, , , , , ) = pool.slot0();\\n\\n        liquidity = UniswapHelper.getLiquidityFromAmounts(\\n            amount0Desired,\\n            amount1Desired,\\n            tickLower,\\n            tickUpper,\\n            sqrtRatioX96\\n        );\\n\\n        (amount0, amount1) = UniswapHelper.getAmountsFromLiquidity(liquidity, tick, tickLower, tickUpper, sqrtRatioX96);\\n    }\\n\\n    ///@notice find uniswap v3 deepest pool of specific pair\\n    ///@param factoryAddress address of the UniswapV3Factory\\n    ///@param token0 address of the token0\\n    ///@param token1 address of the token1\\n    ///@param feeTiers array of fee tiers to check\\n    function findV3DeepestPool(\\n        address factoryAddress,\\n        address token0,\\n        address token1,\\n        uint24[] memory feeTiers\\n    ) internal view returns (address deepestPool) {\\n        uint128 largestLiquidity;\\n\\n        for (uint256 i; i < feeTiers.length; ++i) {\\n            if (feeTiers[i] == 0) {\\n                continue;\\n            }\\n\\n            address _poolAddress = IUniswapV3Factory(factoryAddress).getPool(token0, token1, feeTiers[i]);\\n\\n            if (_poolAddress == address(0)) {\\n                continue;\\n            }\\n\\n            uint128 _liquidity = IUniswapV3Pool(_poolAddress).liquidity();\\n\\n            (deepestPool, largestLiquidity) = _liquidity > largestLiquidity\\n                ? (_poolAddress, _liquidity)\\n                : (deepestPool, largestLiquidity);\\n        }\\n\\n        require(deepestPool != address(0), \\\"UHDP0\\\");\\n    }\\n\\n    ///@notice check if the pool exist\\n    ///@param factoryAddress address of the UniswapV3Factory\\n    ///@param token0 address of the token0\\n    ///@param token1 address of the token1\\n    ///@param feeTiers array of fee tiers to check\\n    function isPoolExist(\\n        address factoryAddress,\\n        address token0,\\n        address token1,\\n        uint24[] memory feeTiers\\n    ) internal view returns (bool) {\\n        for (uint256 i = 0; i < feeTiers.length; ++i) {\\n            if (feeTiers[i] == 0) {\\n                continue;\\n            }\\n\\n            address pool = IUniswapV3Factory(factoryAddress).getPool(token0, token1, feeTiers[i]);\\n            if (pool != address(0)) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function getDepositCurrentTick(\\n        address factoryAddress,\\n        address token0,\\n        address token1,\\n        uint24 fee\\n    ) internal view returns (int24 currentTick) {\\n        return adjustDepositTick(factoryAddress, getCurrentTick(factoryAddress, token0, token1, fee), fee);\\n    }\\n\\n    function getCurrentTick(\\n        address factoryAddress,\\n        address token0,\\n        address token1,\\n        uint24 fee\\n    ) internal view returns (int24 currentTick) {\\n        address pool = IUniswapV3Factory(factoryAddress).getPool(token0, token1, fee);\\n        require(pool != address(0), \\\"UHP0\\\");\\n\\n        (, currentTick, , , , , ) = IUniswapV3Pool(pool).slot0();\\n    }\\n\\n    function adjustDepositTick(\\n        address factoryAddress,\\n        int24 currentTick,\\n        uint24 fee\\n    ) internal view returns (int24 currentTickAdjusted) {\\n        // fee amount tick spacing\\n        // 100: 1\\n        // 500: 10\\n        // 3000: 60\\n        // 10000: 200\\n        currentTickAdjusted = currentTick;\\n        int24 tickSpacing = IUniswapV3Factory(factoryAddress).feeAmountTickSpacing(fee);\\n        if (tickSpacing > 1) {\\n            if (currentTick > 0) {\\n                int24 half = tickSpacing.div(2);\\n                int24 remainder = currentTick.mod(tickSpacing);\\n                if (remainder >= half) {\\n                    currentTickAdjusted = currentTick.sub(remainder).add(tickSpacing);\\n                } else {\\n                    currentTickAdjusted = currentTick.sub(remainder);\\n                }\\n            } else if (currentTick < 0) {\\n                int24 half = -tickSpacing.div(2);\\n                int24 remainder = currentTick.mod(tickSpacing);\\n                if (remainder <= half) {\\n                    currentTickAdjusted = currentTick.sub(remainder).sub(tickSpacing);\\n                } else {\\n                    currentTickAdjusted = currentTick.sub(remainder);\\n                }\\n            }\\n        }\\n    }\\n\\n    function isPoolValid(\\n        address factoryAddress,\\n        address pool,\\n        address weth9,\\n        address usdValue,\\n        uint24[] memory feeTiers\\n    ) internal view returns (bool) {\\n        (, , , , , , bool unlocked) = IUniswapV3Pool(pool).slot0();\\n        if (!unlocked) {\\n            return false;\\n        }\\n        return\\n            checkTokenCanBeSwapToWETH9(factoryAddress, IUniswapV3Pool(pool).token0(), weth9, usdValue, feeTiers) &&\\n            checkTokenCanBeSwapToWETH9(factoryAddress, IUniswapV3Pool(pool).token1(), weth9, usdValue, feeTiers);\\n    }\\n\\n    function checkTokenCanBeSwapToWETH9(\\n        address factoryAddress,\\n        address token,\\n        address weth9,\\n        address usdValue,\\n        uint24[] memory feeTiers\\n    ) internal view returns (bool) {\\n        if (token == weth9 || token == usdValue) {\\n            return true;\\n        }\\n        return UniswapHelper.isPoolExist(factoryAddress, token, usdValue, feeTiers);\\n    }\\n}\\n\",\"keccak256\":\"0x66bda80b694a0ff1b3873b27e42b6de5bdcece9e4d275df878184862adc53b62\",\"license\":\"GPL-2.0\"},\"contracts/libraries/UniswapUncollectedFeeHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/libraries/FixedPoint128.sol\\\";\\n\\n///@title library to interact with NFT token and do some useful function with it\\nlibrary UniswapUncollectedFeeHelper {\\n    ///@notice the output struct of getUncollectedFees\\n    ///@param token0 address of the token0\\n    ///@param token1 address of the token1\\n    ///@param amount0 amount of token0\\n    ///@param amount1 amount of token1\\n    struct GetUncollectedFeesOutput {\\n        address token0;\\n        address token1;\\n        uint128 amount0;\\n        uint128 amount1;\\n    }\\n\\n    ///@notice Get the uncollected fees of a position\\n    ///@param factoryAddress address of the factory\\n    ///@param nonfungiblePositionManagerAddress address of the nonfungiblePositionManager\\n    ///@param tokenId Id of the position\\n    ///@return output the output struct of getUncollectedFees\\n    function getUncollectedFees(\\n        address factoryAddress,\\n        address nonfungiblePositionManagerAddress,\\n        uint256 tokenId\\n    ) internal view returns (GetUncollectedFeesOutput memory output) {\\n        {\\n            uint128 liquidity;\\n            uint256 feeGrowthInside0LastX128;\\n            uint256 feeGrowthInside1LastX128;\\n            (\\n                ,\\n                ,\\n                output.token0,\\n                output.token1,\\n                ,\\n                ,\\n                ,\\n                liquidity,\\n                feeGrowthInside0LastX128,\\n                feeGrowthInside1LastX128,\\n                output.amount0,\\n                output.amount1\\n            ) = INonfungiblePositionManager(nonfungiblePositionManagerAddress).positions(tokenId);\\n\\n            (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) = _getFeeGrowthInside(\\n                factoryAddress,\\n                nonfungiblePositionManagerAddress,\\n                tokenId\\n            );\\n\\n            output.amount0 += uint128(\\n                FullMath.mulDiv(feeGrowthInside0X128 - feeGrowthInside0LastX128, liquidity, FixedPoint128.Q128)\\n            );\\n            output.amount1 += uint128(\\n                FullMath.mulDiv(feeGrowthInside1X128 - feeGrowthInside1LastX128, liquidity, FixedPoint128.Q128)\\n            );\\n        }\\n    }\\n\\n    function _getFeeGrowthInside(\\n        address factoryAddress,\\n        address nonfungiblePositionManagerAddress,\\n        uint256 tokenId\\n    ) internal view returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) {\\n        GetFeeGrowthInsideData memory data = _preLoadDataForGetFeeGrowthInside(\\n            factoryAddress,\\n            nonfungiblePositionManagerAddress,\\n            tokenId\\n        );\\n\\n        // calculate fee growth below\\n        uint256 feeGrowthBelow0X128;\\n        uint256 feeGrowthBelow1X128;\\n        if (data.tickCurrent >= data.tickLower) {\\n            feeGrowthBelow0X128 = data.lowerFeeGrowthOutside0X128;\\n            feeGrowthBelow1X128 = data.lowerFeeGrowthOutside1X128;\\n        } else {\\n            feeGrowthBelow0X128 = data.feeGrowthGlobal0X128 - data.lowerFeeGrowthOutside0X128;\\n            feeGrowthBelow1X128 = data.feeGrowthGlobal1X128 - data.lowerFeeGrowthOutside1X128;\\n        }\\n\\n        // calculate fee growth above\\n        uint256 feeGrowthAbove0X128;\\n        uint256 feeGrowthAbove1X128;\\n        if (data.tickCurrent < data.tickUpper) {\\n            feeGrowthAbove0X128 = data.upperFeeGrowthOutside0X128;\\n            feeGrowthAbove1X128 = data.upperFeeGrowthOutside1X128;\\n        } else {\\n            feeGrowthAbove0X128 = data.feeGrowthGlobal0X128 - data.upperFeeGrowthOutside0X128;\\n            feeGrowthAbove1X128 = data.feeGrowthGlobal1X128 - data.upperFeeGrowthOutside1X128;\\n        }\\n\\n        feeGrowthInside0X128 = data.feeGrowthGlobal0X128 - feeGrowthBelow0X128 - feeGrowthAbove0X128;\\n        feeGrowthInside1X128 = data.feeGrowthGlobal1X128 - feeGrowthBelow1X128 - feeGrowthAbove1X128;\\n    }\\n\\n    struct GetFeeGrowthInsideData {\\n        int24 tickCurrent;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 feeGrowthGlobal0X128; // SLOAD for gas optimization\\n        uint256 feeGrowthGlobal1X128; // SLOAD for gas optimization\\n        uint256 lowerFeeGrowthOutside0X128;\\n        uint256 lowerFeeGrowthOutside1X128;\\n        uint256 upperFeeGrowthOutside0X128;\\n        uint256 upperFeeGrowthOutside1X128;\\n    }\\n\\n    function _preLoadDataForGetFeeGrowthInside(\\n        address factoryAddress,\\n        address nonfungiblePositionManagerAddress,\\n        uint256 tokenId\\n    ) internal view returns (GetFeeGrowthInsideData memory data) {\\n        {\\n            address token0;\\n            address token1;\\n            uint24 fee;\\n            (, , token0, token1, fee, data.tickLower, data.tickUpper, , , , , ) = INonfungiblePositionManager(\\n                nonfungiblePositionManagerAddress\\n            ).positions(tokenId);\\n\\n            IUniswapV3Pool _pool = IUniswapV3Pool(\\n                PoolAddress.computeAddress(factoryAddress, PoolAddress.getPoolKey(token0, token1, fee))\\n            );\\n\\n            data.feeGrowthGlobal0X128 = _pool.feeGrowthGlobal0X128(); // SLOAD for gas optimization\\n            data.feeGrowthGlobal1X128 = _pool.feeGrowthGlobal1X128(); // SLOAD for gas optimization\\n\\n            (, data.tickCurrent, , , , , ) = _pool.slot0();\\n            (, , data.lowerFeeGrowthOutside0X128, data.lowerFeeGrowthOutside1X128, , , , ) = _pool.ticks(\\n                data.tickLower\\n            );\\n\\n            (, , data.upperFeeGrowthOutside0X128, data.upperFeeGrowthOutside1X128, , , , ) = _pool.ticks(\\n                data.tickUpper\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x85df70b869529c787a61ee62a1795c3b96e2396ee0ac21bf6e05592fbedd1589\",\"license\":\"GPL-2.0\"},\"contracts/modules/BaseModule.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../interfaces/IRegistry.sol\\\";\\nimport \\\"../interfaces/IRegistryAddressHolder.sol\\\";\\nimport \\\"../interfaces/IPositionManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\ncontract BaseModule is Pausable {\\n    IRegistryAddressHolder public registryAddressHolder;\\n\\n    modifier onlyWhitelistedKeeper() {\\n        require(registry().whitelistedKeepers(msg.sender), \\\"BMOWLK\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == registry().governance(), \\\"BMOG\\\");\\n        _;\\n    }\\n\\n    constructor(address _registryAddressHolder) {\\n        require(_registryAddressHolder != address(0), \\\"BMRAH0\\\");\\n        registryAddressHolder = IRegistryAddressHolder(_registryAddressHolder);\\n    }\\n\\n    ///@notice get IRegistry from registryAddressHolder\\n    ///@return IRegistry interface of registry\\n    function registry() internal view returns (IRegistry) {\\n        return IRegistry(registryAddressHolder.registry());\\n    }\\n\\n    function pause() external onlyGovernance {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyGovernance {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0xc5b960105980f96129201014931633e0d8fab75a842b475e6508e75ce70eee9c\",\"license\":\"GPL-2.0\"},\"contracts/modules/IdleLiquidityModuleV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./BaseModule.sol\\\";\\nimport \\\"../libraries/SafeInt24Math.sol\\\";\\nimport \\\"../libraries/UniswapHelper.sol\\\";\\nimport \\\"../libraries/UniswapUncollectedFeeHelper.sol\\\";\\nimport \\\"../libraries/MathHelper.sol\\\";\\nimport \\\"../interfaces/modules/IIdleLiquidityModuleV2.sol\\\";\\nimport \\\"../interfaces/IPositionManagerFactory.sol\\\";\\nimport \\\"../interfaces/IPositionManager.sol\\\";\\nimport \\\"../interfaces/IUniswapAddressHolder.sol\\\";\\nimport \\\"../interfaces/actions/IClosePositionOneShot.sol\\\";\\nimport \\\"../interfaces/actions/IWithdrawNativeToken.sol\\\";\\nimport \\\"../interfaces/actions/ISwapToPositionRatio.sol\\\";\\nimport \\\"../interfaces/actions/IMint.sol\\\";\\nimport \\\"../base/Multicall.sol\\\";\\n\\n///@title Idle Liquidity Module to manage liquidity for a user position\\ncontract IdleLiquidityModuleV2 is BaseModule, IIdleLiquidityModuleV2, Multicall {\\n    ///@notice uniswap address holder\\n    IUniswapAddressHolder public immutable uniswapAddressHolder;\\n    using SafeMath for uint256;\\n    using SafeInt24Math for int24;\\n\\n    ///@notice assing the uniswap address holder to the contract\\n    ///@param _registryAddressHolder address of the registry address holder\\n    ///@param _uniswapAddressHolder address of the uniswap address holder\\n    constructor(address _registryAddressHolder, address _uniswapAddressHolder) BaseModule(_registryAddressHolder) {\\n        require(_uniswapAddressHolder != address(0), \\\"ILCA0\\\");\\n\\n        uniswapAddressHolder = IUniswapAddressHolder(_uniswapAddressHolder);\\n    }\\n\\n    ///@notice check if the position is out of range and rebalance it by swapping the tokens as necessary\\n    ///@param input RebalanceInput struct\\n    function rebalance(RebalanceInput calldata input) external whenNotPaused onlyWhitelistedKeeper {\\n        address positionManager = IPositionManagerFactory(registry().positionManagerFactoryAddress())\\n            .userToPositionManager(input.userAddress);\\n        require(positionManager != address(0), \\\"ILPM0\\\");\\n\\n        IPositionManager.PositionInfo memory pInfo = IPositionManager(positionManager).getPositionInfo(\\n            input.positionId\\n        );\\n\\n        checkCurrentTickOutOfRange(pInfo.tokenId);\\n\\n        _CloseAndRepayRebalanceResult memory carRes = _closedAndRepayRebalance(\\n            _CloseAndRepayRebalanceParams({\\n                positionManager: positionManager,\\n                feeReceiver: input.feeReceiver,\\n                tokenId: pInfo.tokenId,\\n                rebalanceFee: input.estimatedGasFee\\n            })\\n        );\\n\\n        uint256 amount0Desired = carRes.amount0Removed.add(carRes.amount0CollectedFee).add(pInfo.amount0Leftover);\\n        uint256 amount1Desired = carRes.amount1Removed.add(carRes.amount1CollectedFee).add(pInfo.amount1Leftover);\\n\\n        require(amount0Desired > 0 || amount1Desired > 0, \\\"ILAR\\\");\\n\\n        _SwapAndMintResult memory samRes = _swapAndMint(\\n            _SwapAndMintParams({\\n                positionManager: positionManager,\\n                tokenId: pInfo.tokenId,\\n                amount0: amount0Desired,\\n                amount1: amount1Desired,\\n                tickLowerDiff: pInfo.tickLowerDiff,\\n                tickUpperDiff: pInfo.tickUpperDiff\\n            })\\n        );\\n\\n        IPositionManager(positionManager).middlewareRebalance(\\n            input.positionId,\\n            samRes.newTokenId,\\n            pInfo.tickLowerDiff,\\n            pInfo.tickUpperDiff,\\n            pInfo.amount0CollectedFee.add(carRes.amount0CollectedFee),\\n            pInfo.amount1CollectedFee.add(carRes.amount1CollectedFee),\\n            samRes.amount0Leftover,\\n            samRes.amount1Leftover\\n        );\\n\\n        emit PositionRebalanced(\\n            positionManager,\\n            input.positionId,\\n            pInfo.tokenId,\\n            samRes.newTokenId,\\n            carRes.amount0Removed,\\n            carRes.amount1Removed,\\n            carRes.amount0CollectedFee,\\n            carRes.amount1CollectedFee,\\n            input.estimatedGasFee\\n        );\\n    }\\n\\n    ///@notice check if the position is out of range and rebalance it by swapping the tokens as necessary and customize lower & upper tick diff\\n    ///@param input RebalanceWithTickDiffsInput struct\\n    function rebalanceWithTickDiffs(\\n        RebalanceWithTickDiffsInput calldata input\\n    ) external whenNotPaused onlyWhitelistedKeeper {\\n        address positionManager = IPositionManagerFactory(registry().positionManagerFactoryAddress())\\n            .userToPositionManager(input.userAddress);\\n        require(positionManager != address(0), \\\"ILPM0\\\");\\n\\n        IPositionManager.PositionInfo memory pInfo = IPositionManager(positionManager).getPositionInfo(\\n            input.positionId\\n        );\\n\\n        checkDiffOfTicksRange(input.tickLowerDiff, input.tickUpperDiff, pInfo.tokenId);\\n        checkCurrentTickOutOfRange(pInfo.tokenId);\\n\\n        _CloseAndRepayRebalanceResult memory carRes = _closedAndRepayRebalance(\\n            _CloseAndRepayRebalanceParams({\\n                positionManager: positionManager,\\n                feeReceiver: input.feeReceiver,\\n                tokenId: pInfo.tokenId,\\n                rebalanceFee: input.estimatedGasFee\\n            })\\n        );\\n\\n        uint256 amount0Desired = carRes.amount0Removed.add(carRes.amount0CollectedFee).add(pInfo.amount0Leftover);\\n        uint256 amount1Desired = carRes.amount1Removed.add(carRes.amount1CollectedFee).add(pInfo.amount1Leftover);\\n\\n        require(amount0Desired > 0 || amount1Desired > 0, \\\"ILAR\\\");\\n\\n        _SwapAndMintResult memory samRes = _swapAndMint(\\n            _SwapAndMintParams({\\n                positionManager: positionManager,\\n                tokenId: pInfo.tokenId,\\n                amount0: amount0Desired,\\n                amount1: amount1Desired,\\n                tickLowerDiff: input.tickLowerDiff,\\n                tickUpperDiff: input.tickUpperDiff\\n            })\\n        );\\n\\n        IPositionManager(positionManager).middlewareRebalance(\\n            input.positionId,\\n            samRes.newTokenId,\\n            input.tickLowerDiff,\\n            input.tickUpperDiff,\\n            pInfo.amount0CollectedFee.add(carRes.amount0CollectedFee),\\n            pInfo.amount1CollectedFee.add(carRes.amount1CollectedFee),\\n            samRes.amount0Leftover,\\n            samRes.amount1Leftover\\n        );\\n\\n        emit PositionRebalanced(\\n            positionManager,\\n            input.positionId,\\n            pInfo.tokenId,\\n            samRes.newTokenId,\\n            carRes.amount0Removed,\\n            carRes.amount1Removed,\\n            carRes.amount0CollectedFee,\\n            carRes.amount1CollectedFee,\\n            input.estimatedGasFee\\n        );\\n    }\\n\\n    function _closedAndRepayRebalance(\\n        _CloseAndRepayRebalanceParams memory params\\n    ) internal returns (_CloseAndRepayRebalanceResult memory res) {\\n        ///@dev call getUncollectedFees\\n        UniswapUncollectedFeeHelper.GetUncollectedFeesOutput memory ucfOutput = UniswapUncollectedFeeHelper\\n            .getUncollectedFees(\\n                uniswapAddressHolder.uniswapV3FactoryAddress(),\\n                uniswapAddressHolder.nonfungiblePositionManagerAddress(),\\n                params.tokenId\\n            );\\n\\n        ///@dev call closePositionOneShotAction\\n        IClosePositionOneShot.ClosePositionOneShotOutput memory cposOutput = IClosePositionOneShot(\\n            params.positionManager\\n        ).closePositionOneShot(\\n                IClosePositionOneShot.ClosePositionOneShotInput({ tokenId: params.tokenId, returnTokenToUser: false })\\n            );\\n\\n        require(\\n            cposOutput.amount0Collected >= ucfOutput.amount0 && cposOutput.amount1Collected >= ucfOutput.amount1,\\n            \\\"IL2CP\\\"\\n        );\\n\\n        if (params.rebalanceFee != 0) {\\n            ///@dev call withdrawNativeToken action\\n            IWithdrawNativeToken(params.positionManager).withdrawNativeToken(\\n                IWithdrawNativeToken.WithdrawNativeTokenInput({\\n                    amount: params.rebalanceFee,\\n                    receiver: params.feeReceiver\\n                })\\n            );\\n        }\\n\\n        // total amount0 collected = amount0Removed(liquidity part) + amount0CollectedFee(fee part)\\n        // total amount1 collected = amount1Removed(liquidity part) + amount1CollectedFee(fee part)\\n        res.amount0CollectedFee = ucfOutput.amount0;\\n        res.amount1CollectedFee = ucfOutput.amount1;\\n        res.amount0Removed = cposOutput.amount0Collected.sub(ucfOutput.amount0);\\n        res.amount1Removed = cposOutput.amount1Collected.sub(ucfOutput.amount1);\\n    }\\n\\n    function _swapAndMint(_SwapAndMintParams memory params) internal returns (_SwapAndMintResult memory res) {\\n        UniswapHelper.getTokensOutput memory tokensOutput = UniswapHelper.getTokens(\\n            params.tokenId,\\n            INonfungiblePositionManager(uniswapAddressHolder.nonfungiblePositionManagerAddress())\\n        );\\n\\n        int24 currentTick = UniswapHelper.getDepositCurrentTick(\\n            uniswapAddressHolder.uniswapV3FactoryAddress(),\\n            tokensOutput.token0,\\n            tokensOutput.token1,\\n            tokensOutput.fee\\n        );\\n\\n        uint256 amount0Deposit;\\n        uint256 amount1Deposit;\\n        ///@dev call swapToPositionAction to perform the swap\\n        (uint256 amount0AfterSwapped, uint256 amount1AfterSwapped) = ISwapToPositionRatio(params.positionManager)\\n            .swapToPositionRatio(\\n                ISwapToPositionRatio.SwapToPositionInput({\\n                    token0Address: tokensOutput.token0,\\n                    token1Address: tokensOutput.token1,\\n                    fee: tokensOutput.fee,\\n                    amount0In: params.amount0,\\n                    amount1In: params.amount1,\\n                    tickLower: currentTick.add(params.tickLowerDiff),\\n                    tickUpper: currentTick.add(params.tickUpperDiff)\\n                })\\n            );\\n\\n        ///@dev call mintAction\\n        (res.newTokenId, amount0Deposit, amount1Deposit) = IMint(params.positionManager).mint(\\n            IMint.MintInput({\\n                token0Address: tokensOutput.token0,\\n                token1Address: tokensOutput.token1,\\n                fee: tokensOutput.fee,\\n                tickLower: currentTick.add(params.tickLowerDiff),\\n                tickUpper: currentTick.add(params.tickUpperDiff),\\n                amount0Desired: amount0AfterSwapped,\\n                amount1Desired: amount1AfterSwapped,\\n                isReturnLeftOver: false\\n            })\\n        );\\n\\n        ///@dev cal leftOver\\n        res.amount0Leftover = amount0AfterSwapped.sub(amount0Deposit);\\n        res.amount1Leftover = amount1AfterSwapped.sub(amount1Deposit);\\n    }\\n\\n    function checkCurrentTickOutOfRange(uint256 tokenId) internal view {\\n        UniswapHelper.getTokensOutput memory tokensOutput = UniswapHelper.getTokens(\\n            tokenId,\\n            INonfungiblePositionManager(uniswapAddressHolder.nonfungiblePositionManagerAddress())\\n        );\\n\\n        int24 currentTick = UniswapHelper.getCurrentTick(\\n            uniswapAddressHolder.uniswapV3FactoryAddress(),\\n            tokensOutput.token0,\\n            tokensOutput.token1,\\n            tokensOutput.fee\\n        );\\n\\n        ///@dev check if the current tick is out of range\\n        ///note current tick == tickUpper is out of range\\n        require(currentTick < tokensOutput.tickLower || currentTick >= tokensOutput.tickUpper, \\\"ILOOR\\\");\\n    }\\n\\n    function checkDiffOfTicksRange(int24 tickLowerDiff, int24 tickUpperDiff, uint256 tokenId) internal view {\\n        UniswapHelper.getTokensOutput memory tokensOutput = UniswapHelper.getTokens(\\n            tokenId,\\n            INonfungiblePositionManager(uniswapAddressHolder.nonfungiblePositionManagerAddress())\\n        );\\n        int24 tickSpacing = IUniswapV3Factory(uniswapAddressHolder.uniswapV3FactoryAddress()).feeAmountTickSpacing(\\n            tokensOutput.fee\\n        );\\n        require(\\n            tickLowerDiff <= 0 &&\\n                tickUpperDiff >= 0 &&\\n                tickLowerDiff % tickSpacing == 0 &&\\n                tickUpperDiff % tickSpacing == 0,\\n            \\\"ILTD\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe5480e2c93ef1afacf2bd5a018172ec540ba4fa17dc12cf2322b01ab28a97979\",\"license\":\"GPL-2.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200346c3803806200346c8339810160408190526200003491620000e7565b6000805460ff19169055816001600160a01b038116620000715760405162461bcd60e51b815260040162000068906200013d565b60405180910390fd5b60008054610100600160a81b0319166101006001600160a01b03938416021790558116620000b35760405162461bcd60e51b815260040162000068906200011e565b60601b6001600160601b031916608052506200015d565b80516001600160a01b0381168114620000e257600080fd5b919050565b60008060408385031215620000fa578182fd5b6200010583620000ca565b91506200011560208401620000ca565b90509250929050565b6020808252600590820152640494c4341360dc1b604082015260600190565b6020808252600690820152650424d524148360d41b604082015260600190565b60805160601c6132c9620001a3600039806104385280610f445280610fde528061116952806111c952806112bd528061134e5280611635528061169552506132c96000f3fe60806040526004361061007b5760003560e01c8063ac9650d81161004e578063ac9650d8146100f9578063c0f06ca414610119578063dc9d7e271461012e578063fd3f33651461014e5761007b565b80633f4ba83a146100805780635c975abb146100975780638456cb59146100c2578063974914d5146100d7575b600080fd5b34801561008c57600080fd5b5061009561016e565b005b3480156100a357600080fd5b506100ac610229565b6040516100b99190612f0b565b60405180910390f35b3480156100ce57600080fd5b50610095610232565b3480156100e357600080fd5b506100ec6102e2565b6040516100b99190612e6f565b61010c610107366004612928565b6102f6565b6040516100b99190612eab565b34801561012557600080fd5b506100ec610436565b34801561013a57600080fd5b50610095610149366004612b97565b61045a565b34801561015a57600080fd5b50610095610169366004612b80565b6109a1565b610176610d8d565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ae57600080fd5b505afa1580156101c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e6919061290c565b6001600160a01b0316336001600160a01b03161461021f5760405162461bcd60e51b815260040161021690612f55565b60405180910390fd5b610227610e19565b565b60005460ff1690565b61023a610d8d565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561027257600080fd5b505afa158015610286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102aa919061290c565b6001600160a01b0316336001600160a01b0316146102da5760405162461bcd60e51b815260040161021690612f55565b610227610eb9565b60005461010090046001600160a01b031681565b60608167ffffffffffffffff8111801561030f57600080fd5b5060405190808252806020026020018201604052801561034357816020015b606081526020019060019003908161032e5790505b50905060005b8281101561042f576000803086868581811061036157fe5b905060200281019061037391906131cc565b604051610381929190612e5f565b600060405180830381855af49150503d80600081146103bc576040519150601f19603f3d011682016040523d82523d6000602084013e6103c1565b606091505b50915091508161040d576044815110156103da57600080fd5b600481019050808060200190518101906103f491906129e9565b60405162461bcd60e51b81526004016102169190612f24565b8084848151811061041a57fe5b60209081029190910101525050600101610349565b5092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610462610229565b156104a7576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6104af610d8d565b6001600160a01b031663edbe9437336040518263ffffffff1660e01b81526004016104da9190612e6f565b60206040518083038186803b1580156104f257600080fd5b505afa158015610506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052a9190612997565b6105465760405162461bcd60e51b81526004016102169061300c565b6000610550610d8d565b6001600160a01b0316632d2c5b586040518163ffffffff1660e01b815260040160206040518083038186803b15801561058857600080fd5b505afa15801561059c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c0919061290c565b6001600160a01b031663c81e0f916105db60208501856128f0565b6040518263ffffffff1660e01b81526004016105f79190612e6f565b60206040518083038186803b15801561060f57600080fd5b505afa158015610623573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610647919061290c565b90506001600160a01b03811661066f5760405162461bcd60e51b815260040161021690612f91565b6000816001600160a01b031663519f509984604001356040518263ffffffff1660e01b81526004016106a19190613151565b6101a06040518083038186803b1580156106ba57600080fd5b505afa1580156106ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f29190612abb565b905061071e61070760a08501608086016129b1565b61071760c0860160a087016129b1565b8351610f3c565b805161072990611161565b600061077d6040518060800160405280856001600160a01b0316815260200186602001602081019061075b91906128f0565b6001600160a01b031681528451602082015260608701356040909101526112ae565b905060006107ab8361012001516107a5846000015185604001516115c090919063ffffffff16565b906115c0565b905060006107d38461014001516107a5856020015186606001516115c090919063ffffffff16565b905060008211806107e45750600081115b6108005760405162461bcd60e51b815260040161021690612fcf565b600061086a6040518060c00160405280886001600160a01b031681526020018760000151815260200185815260200184815260200189608001602081019061084891906129b1565b60020b815260200161086060c08b0160a08c016129b1565b60020b9052611621565b80519091506001600160a01b0387169063abf0f8a19060408a01359061089660a08c0160808d016129b1565b6108a660c08d0160a08e016129b1565b895160e08c01516108b6916115c0565b60208b01516101008d01516108ca916115c0565b886020015189604001516040518963ffffffff1660e01b81526004016108f798979695949392919061315a565b600060405180830381600087803b15801561091157600080fd5b505af1158015610925573d6000803e3d6000fd5b50505050856001600160a01b03167f31bd25c3946a250cf8faf9b023791d5cc83ef32367012f8c643a66565d95a6ff886040013587600001518460000151886040015189606001518a600001518b602001518f60600135604051610990989796959493929190613196565b60405180910390a250505050505050565b6109a9610229565b156109ee576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6109f6610d8d565b6001600160a01b031663edbe9437336040518263ffffffff1660e01b8152600401610a219190612e6f565b60206040518083038186803b158015610a3957600080fd5b505afa158015610a4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a719190612997565b610a8d5760405162461bcd60e51b81526004016102169061300c565b6000610a97610d8d565b6001600160a01b0316632d2c5b586040518163ffffffff1660e01b815260040160206040518083038186803b158015610acf57600080fd5b505afa158015610ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b07919061290c565b6001600160a01b031663c81e0f91610b2260208501856128f0565b6040518263ffffffff1660e01b8152600401610b3e9190612e6f565b60206040518083038186803b158015610b5657600080fd5b505afa158015610b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8e919061290c565b90506001600160a01b038116610bb65760405162461bcd60e51b815260040161021690612f91565b6000816001600160a01b031663519f509984604001356040518263ffffffff1660e01b8152600401610be89190613151565b6101a06040518083038186803b158015610c0157600080fd5b505afa158015610c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c399190612abb565b9050610c488160000151611161565b6000610c7a6040518060800160405280856001600160a01b0316815260200186602001602081019061075b91906128f0565b90506000610ca28361012001516107a5846000015185604001516115c090919063ffffffff16565b90506000610cca8461014001516107a5856020015186606001516115c090919063ffffffff16565b90506000821180610cdb5750600081115b610cf75760405162461bcd60e51b815260040161021690612fcf565b6000610d4b6040518060c00160405280886001600160a01b031681526020018760000151815260200185815260200184815260200187610160015160020b815260200187610180015160020b815250611621565b9050856001600160a01b031663abf0f8a1886040013583600001518861016001518961018001516108b68a600001518c60e001516115c090919063ffffffff16565b60008060019054906101000a90046001600160a01b03166001600160a01b0316637b1039996040518163ffffffff1660e01b815260040160206040518083038186803b158015610ddc57600080fd5b505afa158015610df0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e14919061290c565b905090565b610e21610229565b610e69576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610e9c6119a1565b604080516001600160a01b039092168252519081900360200190a1565b610ec1610229565b15610f06576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e9c6119a1565b6000610fd8827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635bfccac96040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9b57600080fd5b505afa158015610faf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd3919061290c565b6119a5565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380f5db8c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561103557600080fd5b505afa158015611049573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106d919061290c565b6001600160a01b03166322afcccb83604001516040518263ffffffff1660e01b815260040161109c9190613141565b60206040518083038186803b1580156110b457600080fd5b505afa1580156110c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ec91906129cd565b905060008560020b13158015611106575060008460020b12155b801561112257508060020b8560020b8161111c57fe5b0760020b155b801561113e57508060020b8460020b8161113857fe5b0760020b155b61115a5760405162461bcd60e51b815260040161021690612f37565b5050505050565b60006111c0827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635bfccac96040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9b57600080fd5b905060006112697f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380f5db8c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561122057600080fd5b505afa158015611234573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611258919061290c565b835160208501516040860151611a6b565b9050816060015160020b8160020b128061128d5750816080015160020b8160020b12155b6112a95760405162461bcd60e51b815260040161021690612fed565b505050565b6112b6612755565b60006113e77f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380f5db8c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561131457600080fd5b505afa158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c919061290c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635bfccac96040518163ffffffff1660e01b815260040160206040518083038186803b1580156113a557600080fd5b505afa1580156113b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dd919061290c565b8560400151611b98565b8351604080518082018252818701518152600060208201819052915163367d52d760e11b815293945090926001600160a01b0390921691636cfaa5ae916114309160040161302c565b6040805180830381600087803b15801561144957600080fd5b505af115801561145d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114819190612a73565b905081604001516001600160801b03168160000151101580156114b5575081606001516001600160801b0316816020015110155b6114d15760405162461bcd60e51b815260040161021690612fb0565b6060840151156115635783600001516001600160a01b0316636c38e43660405180604001604052808760600151815260200187602001516001600160a01b03168152506040518263ffffffff1660e01b81526004016115309190613121565b600060405180830381600087803b15801561154a57600080fd5b505af115801561155e573d6000803e3d6000fd5b505050505b6040820180516001600160801b0390811685526060840151811660208601529051825161159292909116611d3c565b6040840152606082015160208201516115b3916001600160801b0316611d3c565b6060840152509092915050565b60008282018381101561161a576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b61162961277d565b600061168c83602001517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635bfccac96040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9b57600080fd5b905060006117357f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380f5db8c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116ec57600080fd5b505afa158015611700573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611724919061290c565b835160208501516040860151611d99565b905060008060008087600001516001600160a01b031663a1ef2dbb6040518060e0016040528089600001516001600160a01b0316815260200189602001516001600160a01b03168152602001896040015162ffffff1681526020018b6040015181526020018b6060015181526020016117be8c608001518a60020b611dba90919063ffffffff16565b60020b81526020016117e08c60a001518a60020b611dba90919063ffffffff16565b60020b8152506040518263ffffffff1660e01b815260040161180291906130bc565b6040805180830381600087803b15801561181b57600080fd5b505af115801561182f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118539190612cf7565b9150915087600001516001600160a01b0316631c29efb860405180610100016040528089600001516001600160a01b0316815260200189602001516001600160a01b03168152602001896040015162ffffff1681526020016118c58c608001518a60020b611dba90919063ffffffff16565b60020b81526020016118e78c60a001518a60020b611dba90919063ffffffff16565b60020b8152602001858152602001848152602001600015158152506040518263ffffffff1660e01b815260040161191e9190613045565b606060405180830381600087803b15801561193857600080fd5b505af115801561194c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119709190612d1a565b918952945092506119818285611d3c565b60208801526119908184611d3c565b604088015250949695505050505050565b3390565b6119ad61279e565b60405163133f757160e31b81526001600160a01b038316906399fbab88906119d9908690600401613151565b6101806040518083038186803b1580156119f257600080fd5b505afa158015611a06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2a9190612d47565b5050505050600290810b810b608089015290810b900b606087015262ffffff1660408601526001600160a01b03908116602086015216835250909392505050565b600080856001600160a01b0316631698ee828686866040518463ffffffff1660e01b8152600401611a9e93929190612e83565b60206040518083038186803b158015611ab657600080fd5b505afa158015611aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aee919061290c565b90506001600160a01b038116611b165760405162461bcd60e51b815260040161021690612f73565b806001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015611b4f57600080fd5b505afa158015611b63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b879190612c4e565b50939b9a5050505050505050505050565b611ba06127cc565b6000806000856001600160a01b03166399fbab88866040518263ffffffff1660e01b8152600401611bd19190613151565b6101806040518083038186803b158015611bea57600080fd5b505afa158015611bfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c229190612d47565b909192939495969798999a5090919293949596979899509091929394959650909192939495509091929394508a6000018b6020018c6040018d606001846001600160801b03166001600160801b0316815250846001600160801b03166001600160801b0316815250849950859a50869b50876001600160a01b03166001600160a01b0316815250876001600160a01b03166001600160a01b031681525050505050505050600080611cd4898989611e2e565b91509150611cf2848303866001600160801b0316600160801b611eeb565b6040870180516001600160801b03920182169052611d1a90848303908716600160801b611eeb565b606087018051919091016001600160801b031690525093979650505050505050565b600082821115611d93576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000611db185611dab87878787611a6b565b84611f9a565b95945050505050565b6000828201600283900b8213801590611dd957508360020b8160020b12155b80611df7575060008360020b128015611df757508360020b8160020b125b61161a576040805162461bcd60e51b8152602060048201526003602482015262534d3560e81b604482015290519081900360640190fd5b6000806000611e3e86868661211e565b9050600080826020015160020b836000015160020b12611e6957505060a081015160c0820151611e84565b8260a0015183606001510391508260c0015183608001510390505b600080846040015160020b856000015160020b1215611eaf57505060e0830151610100840151611ecb565b8460e00151856060015103915084610100015185608001510390505b606085015160809095015193909403039891039190910395509350505050565b6000808060001985870986860292508281109083900303905080611f215760008411611f1657600080fd5b50829004905061161a565b808411611f2d57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6040516322afcccb60e01b815282906000906001600160a01b038616906322afcccb90611fcb908690600401613141565b60206040518083038186803b158015611fe357600080fd5b505afa158015611ff7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201b91906129cd565b905060018160020b13156121165760008460020b13156120a0576000612045600283810b90612489565b90506000612057600287900b84612537565b90508160020b8160020b126120885761208183612078600289900b846125a7565b60020b90611dba565b9350612099565b612096600287900b826125a7565b93505b5050612116565b60008460020b12156121165760006120bc600283810b90612489565b600090810391506120d1600287900b84612537565b90508160020b8160020b13612102576120fb836120f2600289900b846125a7565b60020b906125a7565b9350612113565b612110600287900b826125a7565b93505b50505b509392505050565b6121266127f3565b6000806000856001600160a01b03166399fbab88866040518263ffffffff1660e01b81526004016121579190613151565b6101806040518083038186803b15801561217057600080fd5b505afa158015612184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a89190612d47565b5050505050600290810b810b60408c015290810b900b60208a015291965094509250600091506121e49050886121df86868661261b565b612671565b9050806001600160a01b031663f30583996040518163ffffffff1660e01b815260040160206040518083038186803b15801561221f57600080fd5b505afa158015612233573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122579190612cdf565b856060018181525050806001600160a01b031663461413196040518163ffffffff1660e01b815260040160206040518083038186803b15801561229957600080fd5b505afa1580156122ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d19190612cdf565b856080018181525050806001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561231357600080fd5b505afa158015612327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234b9190612c4e565b5050505050600290810b900b865250602085015160405163f30dba9360e01b81526001600160a01b0383169163f30dba939161238a9190600401612f16565b6101006040518083038186803b1580156123a357600080fd5b505afa1580156123b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123db9190612ba8565b5050505060c089015260a08801525050604080860151905163f30dba9360e01b81526001600160a01b0383169163f30dba939161241b9190600401612f16565b6101006040518083038186803b15801561243457600080fd5b505afa158015612448573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246c9190612ba8565b5050505061010089015260e0880152509498975050505050505050565b60008160020b600014156124ca576040805162461bcd60e51b815260206004820152600360248201526229a69960e91b604482015290519081900360640190fd5b8160020b6000191480156124e55750600283900b627fffff19145b1561251d576040805162461bcd60e51b8152602060048201526003602482015262534d3360e81b604482015290519081900360640190fd5b60008260020b8460020b8161252e57fe5b05949350505050565b6000808260020b13612590576040805162461bcd60e51b815260206004820152601860248201527f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000604482015290519081900360640190fd5b8160020b8360020b8161259f57fe5b079392505050565b6000818303600283900b82138015906125c657508360020b8160020b13155b806125e4575060008360020b1280156125e457508360020b8160020b135b61161a576040805162461bcd60e51b815260206004820152600360248201526214d34d60ea1b604482015290519081900360640190fd5b612623612848565b826001600160a01b0316846001600160a01b03161115612641579192915b50604080516060810182526001600160a01b03948516815292909316602083015262ffffff169181019190915290565b600081602001516001600160a01b031682600001516001600160a01b03161061269957600080fd5b50805160208083015160409384015184516001600160a01b0394851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301206001600160f81b031960a085015294901b6bffffffffffffffffffffffff191660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604051806101200160405280600060020b8152602001600060020b8152602001600060020b81526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516060810182526000808252602082018190529181019190915290565b80516128738161326c565b919050565b8051801515811461287357600080fd5b80516fffffffffffffffffffffffffffffffff198116811461287357600080fd5b805161287381613284565b80516001600160801b038116811461287357600080fd5b805161ffff8116811461287357600080fd5b805162ffffff8116811461287357600080fd5b600060208284031215612901578081fd5b813561161a8161326c565b60006020828403121561291d578081fd5b815161161a8161326c565b6000806020838503121561293a578081fd5b823567ffffffffffffffff80821115612951578283fd5b818501915085601f830112612964578283fd5b813581811115612972578384fd5b8660208083028501011115612985578384fd5b60209290920196919550909350505050565b6000602082840312156129a8578081fd5b61161a82612878565b6000602082840312156129c2578081fd5b813561161a81613284565b6000602082840312156129de578081fd5b815161161a81613284565b6000602082840312156129fa578081fd5b815167ffffffffffffffff80821115612a11578283fd5b818401915084601f830112612a24578283fd5b815181811115612a3057fe5b612a43601f8201601f1916602001613218565b9150808252856020828501011115612a59578384fd5b612a6a81602084016020860161323c565b50949350505050565b600060408284031215612a84578081fd5b6040516040810181811067ffffffffffffffff82111715612aa157fe5b604052825181526020928301519281019290925250919050565b60006101a0808385031215612ace578182fd5b612ad781613218565b905082518152612ae960208401612868565b6020820152612afa60408401612888565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100808401518183015250610120808401518183015250610140808401518183015250610160612b638185016128a9565b90820152610180612b758482016128a9565b908201529392505050565b600060808284031215612b91578081fd5b50919050565b600060c08284031215612b91578081fd5b600080600080600080600080610100898b031215612bc4578384fd5b612bcd896128b4565b9750602089015180600f0b8114612be2578485fd5b80975050604089015195506060890151945060808901518060060b8114612c07578485fd5b60a08a0151909450612c188161326c565b60c08a015190935063ffffffff81168114612c31578283fd5b9150612c3f60e08a01612878565b90509295985092959890939650565b600080600080600080600060e0888a031215612c68578081fd5b8751612c738161326c565b6020890151909750612c8481613284565b9550612c92604089016128cb565b9450612ca0606089016128cb565b9350612cae608089016128cb565b925060a088015160ff81168114612cc3578182fd5b9150612cd160c08901612878565b905092959891949750929550565b600060208284031215612cf0578081fd5b5051919050565b60008060408385031215612d09578182fd5b505080516020909101519092909150565b600080600060608486031215612d2e578081fd5b8351925060208401519150604084015190509250925092565b6000806000806000806000806000806000806101808d8f031215612d69578586fd5b8c516bffffffffffffffffffffffff81168114612d84578687fd5b9b50612d9260208e01612868565b9a50612da060408e01612868565b9950612dae60608e01612868565b9850612dbc60808e016128dd565b9750612dca60a08e016128a9565b9650612dd860c08e016128a9565b9550612de660e08e016128b4565b94506101008d015193506101208d01519250612e056101408e016128b4565b9150612e146101608e016128b4565b90509295989b509295989b509295989b565b15159052565b60008151808452612e4481602086016020860161323c565b601f01601f19169290920160200192915050565b60020b9052565b6000828483379101908152919050565b6001600160a01b0391909116815260200190565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015612efe57603f19888603018452612eec858351612e2c565b94509285019290850190600101612ed0565b5092979650505050505050565b901515815260200190565b60029190910b815260200190565b60006020825261161a6020830184612e2c565b6020808252600490820152631253151160e21b604082015260600190565b602080825260049082015263424d4f4760e01b604082015260600190565b6020808252600490820152630554850360e41b604082015260600190565b6020808252600590820152640494c504d360dc1b604082015260600190565b6020808252600590820152640494c3243560dc1b604082015260600190565b60208082526004908201526324a620a960e11b604082015260600190565b60208082526005908201526424a627a7a960d91b604082015260600190565b602080825260069082015265424d4f574c4b60d01b604082015260600190565b8151815260209182015115159181019190915260400190565b81516001600160a01b0390811682526020808401519091169082015260408083015162ffffff169082015260608083015160020b9082015260808083015161010083019161309590840182612e58565b5060a083015160a083015260c083015160c083015260e083015161042f60e0840182612e26565b600060e08201905060018060a01b038084511683528060208501511660208401525062ffffff6040840151166040830152606083015160608301526080830151608083015260a083015160020b60a083015260c083015160020b60c083015292915050565b815181526020918201516001600160a01b03169181019190915260400190565b62ffffff91909116815260200190565b90815260200190565b9788526020880196909652600294850b60408801529290930b6060860152608085015260a084019190915260c083015260e08201526101000190565b978852602088019690965260408701949094526060860192909252608085015260a084015260c083015260e08201526101000190565b6000808335601e198436030181126131e2578283fd5b83018035915067ffffffffffffffff8211156131fc578283fd5b60200191503681900382131561321157600080fd5b9250929050565b60405181810167ffffffffffffffff8111828210171561323457fe5b604052919050565b60005b8381101561325757818101518382015260200161323f565b83811115613266576000848401525b50505050565b6001600160a01b038116811461328157600080fd5b50565b8060020b811461328157600080fdfea264697066735822122057f0d3cce62fedf212d58780000a09447ceb3a123f82bf1fb58d29390a2edfb564736f6c63430007060033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063ac9650d81161004e578063ac9650d8146100f9578063c0f06ca414610119578063dc9d7e271461012e578063fd3f33651461014e5761007b565b80633f4ba83a146100805780635c975abb146100975780638456cb59146100c2578063974914d5146100d7575b600080fd5b34801561008c57600080fd5b5061009561016e565b005b3480156100a357600080fd5b506100ac610229565b6040516100b99190612f0b565b60405180910390f35b3480156100ce57600080fd5b50610095610232565b3480156100e357600080fd5b506100ec6102e2565b6040516100b99190612e6f565b61010c610107366004612928565b6102f6565b6040516100b99190612eab565b34801561012557600080fd5b506100ec610436565b34801561013a57600080fd5b50610095610149366004612b97565b61045a565b34801561015a57600080fd5b50610095610169366004612b80565b6109a1565b610176610d8d565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ae57600080fd5b505afa1580156101c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e6919061290c565b6001600160a01b0316336001600160a01b03161461021f5760405162461bcd60e51b815260040161021690612f55565b60405180910390fd5b610227610e19565b565b60005460ff1690565b61023a610d8d565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561027257600080fd5b505afa158015610286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102aa919061290c565b6001600160a01b0316336001600160a01b0316146102da5760405162461bcd60e51b815260040161021690612f55565b610227610eb9565b60005461010090046001600160a01b031681565b60608167ffffffffffffffff8111801561030f57600080fd5b5060405190808252806020026020018201604052801561034357816020015b606081526020019060019003908161032e5790505b50905060005b8281101561042f576000803086868581811061036157fe5b905060200281019061037391906131cc565b604051610381929190612e5f565b600060405180830381855af49150503d80600081146103bc576040519150601f19603f3d011682016040523d82523d6000602084013e6103c1565b606091505b50915091508161040d576044815110156103da57600080fd5b600481019050808060200190518101906103f491906129e9565b60405162461bcd60e51b81526004016102169190612f24565b8084848151811061041a57fe5b60209081029190910101525050600101610349565b5092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610462610229565b156104a7576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6104af610d8d565b6001600160a01b031663edbe9437336040518263ffffffff1660e01b81526004016104da9190612e6f565b60206040518083038186803b1580156104f257600080fd5b505afa158015610506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052a9190612997565b6105465760405162461bcd60e51b81526004016102169061300c565b6000610550610d8d565b6001600160a01b0316632d2c5b586040518163ffffffff1660e01b815260040160206040518083038186803b15801561058857600080fd5b505afa15801561059c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c0919061290c565b6001600160a01b031663c81e0f916105db60208501856128f0565b6040518263ffffffff1660e01b81526004016105f79190612e6f565b60206040518083038186803b15801561060f57600080fd5b505afa158015610623573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610647919061290c565b90506001600160a01b03811661066f5760405162461bcd60e51b815260040161021690612f91565b6000816001600160a01b031663519f509984604001356040518263ffffffff1660e01b81526004016106a19190613151565b6101a06040518083038186803b1580156106ba57600080fd5b505afa1580156106ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f29190612abb565b905061071e61070760a08501608086016129b1565b61071760c0860160a087016129b1565b8351610f3c565b805161072990611161565b600061077d6040518060800160405280856001600160a01b0316815260200186602001602081019061075b91906128f0565b6001600160a01b031681528451602082015260608701356040909101526112ae565b905060006107ab8361012001516107a5846000015185604001516115c090919063ffffffff16565b906115c0565b905060006107d38461014001516107a5856020015186606001516115c090919063ffffffff16565b905060008211806107e45750600081115b6108005760405162461bcd60e51b815260040161021690612fcf565b600061086a6040518060c00160405280886001600160a01b031681526020018760000151815260200185815260200184815260200189608001602081019061084891906129b1565b60020b815260200161086060c08b0160a08c016129b1565b60020b9052611621565b80519091506001600160a01b0387169063abf0f8a19060408a01359061089660a08c0160808d016129b1565b6108a660c08d0160a08e016129b1565b895160e08c01516108b6916115c0565b60208b01516101008d01516108ca916115c0565b886020015189604001516040518963ffffffff1660e01b81526004016108f798979695949392919061315a565b600060405180830381600087803b15801561091157600080fd5b505af1158015610925573d6000803e3d6000fd5b50505050856001600160a01b03167f31bd25c3946a250cf8faf9b023791d5cc83ef32367012f8c643a66565d95a6ff886040013587600001518460000151886040015189606001518a600001518b602001518f60600135604051610990989796959493929190613196565b60405180910390a250505050505050565b6109a9610229565b156109ee576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6109f6610d8d565b6001600160a01b031663edbe9437336040518263ffffffff1660e01b8152600401610a219190612e6f565b60206040518083038186803b158015610a3957600080fd5b505afa158015610a4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a719190612997565b610a8d5760405162461bcd60e51b81526004016102169061300c565b6000610a97610d8d565b6001600160a01b0316632d2c5b586040518163ffffffff1660e01b815260040160206040518083038186803b158015610acf57600080fd5b505afa158015610ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b07919061290c565b6001600160a01b031663c81e0f91610b2260208501856128f0565b6040518263ffffffff1660e01b8152600401610b3e9190612e6f565b60206040518083038186803b158015610b5657600080fd5b505afa158015610b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8e919061290c565b90506001600160a01b038116610bb65760405162461bcd60e51b815260040161021690612f91565b6000816001600160a01b031663519f509984604001356040518263ffffffff1660e01b8152600401610be89190613151565b6101a06040518083038186803b158015610c0157600080fd5b505afa158015610c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c399190612abb565b9050610c488160000151611161565b6000610c7a6040518060800160405280856001600160a01b0316815260200186602001602081019061075b91906128f0565b90506000610ca28361012001516107a5846000015185604001516115c090919063ffffffff16565b90506000610cca8461014001516107a5856020015186606001516115c090919063ffffffff16565b90506000821180610cdb5750600081115b610cf75760405162461bcd60e51b815260040161021690612fcf565b6000610d4b6040518060c00160405280886001600160a01b031681526020018760000151815260200185815260200184815260200187610160015160020b815260200187610180015160020b815250611621565b9050856001600160a01b031663abf0f8a1886040013583600001518861016001518961018001516108b68a600001518c60e001516115c090919063ffffffff16565b60008060019054906101000a90046001600160a01b03166001600160a01b0316637b1039996040518163ffffffff1660e01b815260040160206040518083038186803b158015610ddc57600080fd5b505afa158015610df0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e14919061290c565b905090565b610e21610229565b610e69576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610e9c6119a1565b604080516001600160a01b039092168252519081900360200190a1565b610ec1610229565b15610f06576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e9c6119a1565b6000610fd8827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635bfccac96040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9b57600080fd5b505afa158015610faf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd3919061290c565b6119a5565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380f5db8c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561103557600080fd5b505afa158015611049573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106d919061290c565b6001600160a01b03166322afcccb83604001516040518263ffffffff1660e01b815260040161109c9190613141565b60206040518083038186803b1580156110b457600080fd5b505afa1580156110c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ec91906129cd565b905060008560020b13158015611106575060008460020b12155b801561112257508060020b8560020b8161111c57fe5b0760020b155b801561113e57508060020b8460020b8161113857fe5b0760020b155b61115a5760405162461bcd60e51b815260040161021690612f37565b5050505050565b60006111c0827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635bfccac96040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9b57600080fd5b905060006112697f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380f5db8c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561122057600080fd5b505afa158015611234573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611258919061290c565b835160208501516040860151611a6b565b9050816060015160020b8160020b128061128d5750816080015160020b8160020b12155b6112a95760405162461bcd60e51b815260040161021690612fed565b505050565b6112b6612755565b60006113e77f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380f5db8c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561131457600080fd5b505afa158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c919061290c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635bfccac96040518163ffffffff1660e01b815260040160206040518083038186803b1580156113a557600080fd5b505afa1580156113b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dd919061290c565b8560400151611b98565b8351604080518082018252818701518152600060208201819052915163367d52d760e11b815293945090926001600160a01b0390921691636cfaa5ae916114309160040161302c565b6040805180830381600087803b15801561144957600080fd5b505af115801561145d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114819190612a73565b905081604001516001600160801b03168160000151101580156114b5575081606001516001600160801b0316816020015110155b6114d15760405162461bcd60e51b815260040161021690612fb0565b6060840151156115635783600001516001600160a01b0316636c38e43660405180604001604052808760600151815260200187602001516001600160a01b03168152506040518263ffffffff1660e01b81526004016115309190613121565b600060405180830381600087803b15801561154a57600080fd5b505af115801561155e573d6000803e3d6000fd5b505050505b6040820180516001600160801b0390811685526060840151811660208601529051825161159292909116611d3c565b6040840152606082015160208201516115b3916001600160801b0316611d3c565b6060840152509092915050565b60008282018381101561161a576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b61162961277d565b600061168c83602001517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635bfccac96040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9b57600080fd5b905060006117357f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380f5db8c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116ec57600080fd5b505afa158015611700573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611724919061290c565b835160208501516040860151611d99565b905060008060008087600001516001600160a01b031663a1ef2dbb6040518060e0016040528089600001516001600160a01b0316815260200189602001516001600160a01b03168152602001896040015162ffffff1681526020018b6040015181526020018b6060015181526020016117be8c608001518a60020b611dba90919063ffffffff16565b60020b81526020016117e08c60a001518a60020b611dba90919063ffffffff16565b60020b8152506040518263ffffffff1660e01b815260040161180291906130bc565b6040805180830381600087803b15801561181b57600080fd5b505af115801561182f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118539190612cf7565b9150915087600001516001600160a01b0316631c29efb860405180610100016040528089600001516001600160a01b0316815260200189602001516001600160a01b03168152602001896040015162ffffff1681526020016118c58c608001518a60020b611dba90919063ffffffff16565b60020b81526020016118e78c60a001518a60020b611dba90919063ffffffff16565b60020b8152602001858152602001848152602001600015158152506040518263ffffffff1660e01b815260040161191e9190613045565b606060405180830381600087803b15801561193857600080fd5b505af115801561194c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119709190612d1a565b918952945092506119818285611d3c565b60208801526119908184611d3c565b604088015250949695505050505050565b3390565b6119ad61279e565b60405163133f757160e31b81526001600160a01b038316906399fbab88906119d9908690600401613151565b6101806040518083038186803b1580156119f257600080fd5b505afa158015611a06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2a9190612d47565b5050505050600290810b810b608089015290810b900b606087015262ffffff1660408601526001600160a01b03908116602086015216835250909392505050565b600080856001600160a01b0316631698ee828686866040518463ffffffff1660e01b8152600401611a9e93929190612e83565b60206040518083038186803b158015611ab657600080fd5b505afa158015611aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aee919061290c565b90506001600160a01b038116611b165760405162461bcd60e51b815260040161021690612f73565b806001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015611b4f57600080fd5b505afa158015611b63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b879190612c4e565b50939b9a5050505050505050505050565b611ba06127cc565b6000806000856001600160a01b03166399fbab88866040518263ffffffff1660e01b8152600401611bd19190613151565b6101806040518083038186803b158015611bea57600080fd5b505afa158015611bfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c229190612d47565b909192939495969798999a5090919293949596979899509091929394959650909192939495509091929394508a6000018b6020018c6040018d606001846001600160801b03166001600160801b0316815250846001600160801b03166001600160801b0316815250849950859a50869b50876001600160a01b03166001600160a01b0316815250876001600160a01b03166001600160a01b031681525050505050505050600080611cd4898989611e2e565b91509150611cf2848303866001600160801b0316600160801b611eeb565b6040870180516001600160801b03920182169052611d1a90848303908716600160801b611eeb565b606087018051919091016001600160801b031690525093979650505050505050565b600082821115611d93576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000611db185611dab87878787611a6b565b84611f9a565b95945050505050565b6000828201600283900b8213801590611dd957508360020b8160020b12155b80611df7575060008360020b128015611df757508360020b8160020b125b61161a576040805162461bcd60e51b8152602060048201526003602482015262534d3560e81b604482015290519081900360640190fd5b6000806000611e3e86868661211e565b9050600080826020015160020b836000015160020b12611e6957505060a081015160c0820151611e84565b8260a0015183606001510391508260c0015183608001510390505b600080846040015160020b856000015160020b1215611eaf57505060e0830151610100840151611ecb565b8460e00151856060015103915084610100015185608001510390505b606085015160809095015193909403039891039190910395509350505050565b6000808060001985870986860292508281109083900303905080611f215760008411611f1657600080fd5b50829004905061161a565b808411611f2d57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6040516322afcccb60e01b815282906000906001600160a01b038616906322afcccb90611fcb908690600401613141565b60206040518083038186803b158015611fe357600080fd5b505afa158015611ff7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201b91906129cd565b905060018160020b13156121165760008460020b13156120a0576000612045600283810b90612489565b90506000612057600287900b84612537565b90508160020b8160020b126120885761208183612078600289900b846125a7565b60020b90611dba565b9350612099565b612096600287900b826125a7565b93505b5050612116565b60008460020b12156121165760006120bc600283810b90612489565b600090810391506120d1600287900b84612537565b90508160020b8160020b13612102576120fb836120f2600289900b846125a7565b60020b906125a7565b9350612113565b612110600287900b826125a7565b93505b50505b509392505050565b6121266127f3565b6000806000856001600160a01b03166399fbab88866040518263ffffffff1660e01b81526004016121579190613151565b6101806040518083038186803b15801561217057600080fd5b505afa158015612184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a89190612d47565b5050505050600290810b810b60408c015290810b900b60208a015291965094509250600091506121e49050886121df86868661261b565b612671565b9050806001600160a01b031663f30583996040518163ffffffff1660e01b815260040160206040518083038186803b15801561221f57600080fd5b505afa158015612233573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122579190612cdf565b856060018181525050806001600160a01b031663461413196040518163ffffffff1660e01b815260040160206040518083038186803b15801561229957600080fd5b505afa1580156122ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d19190612cdf565b856080018181525050806001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561231357600080fd5b505afa158015612327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234b9190612c4e565b5050505050600290810b900b865250602085015160405163f30dba9360e01b81526001600160a01b0383169163f30dba939161238a9190600401612f16565b6101006040518083038186803b1580156123a357600080fd5b505afa1580156123b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123db9190612ba8565b5050505060c089015260a08801525050604080860151905163f30dba9360e01b81526001600160a01b0383169163f30dba939161241b9190600401612f16565b6101006040518083038186803b15801561243457600080fd5b505afa158015612448573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246c9190612ba8565b5050505061010089015260e0880152509498975050505050505050565b60008160020b600014156124ca576040805162461bcd60e51b815260206004820152600360248201526229a69960e91b604482015290519081900360640190fd5b8160020b6000191480156124e55750600283900b627fffff19145b1561251d576040805162461bcd60e51b8152602060048201526003602482015262534d3360e81b604482015290519081900360640190fd5b60008260020b8460020b8161252e57fe5b05949350505050565b6000808260020b13612590576040805162461bcd60e51b815260206004820152601860248201527f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000604482015290519081900360640190fd5b8160020b8360020b8161259f57fe5b079392505050565b6000818303600283900b82138015906125c657508360020b8160020b13155b806125e4575060008360020b1280156125e457508360020b8160020b135b61161a576040805162461bcd60e51b815260206004820152600360248201526214d34d60ea1b604482015290519081900360640190fd5b612623612848565b826001600160a01b0316846001600160a01b03161115612641579192915b50604080516060810182526001600160a01b03948516815292909316602083015262ffffff169181019190915290565b600081602001516001600160a01b031682600001516001600160a01b03161061269957600080fd5b50805160208083015160409384015184516001600160a01b0394851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301206001600160f81b031960a085015294901b6bffffffffffffffffffffffff191660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604051806101200160405280600060020b8152602001600060020b8152602001600060020b81526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516060810182526000808252602082018190529181019190915290565b80516128738161326c565b919050565b8051801515811461287357600080fd5b80516fffffffffffffffffffffffffffffffff198116811461287357600080fd5b805161287381613284565b80516001600160801b038116811461287357600080fd5b805161ffff8116811461287357600080fd5b805162ffffff8116811461287357600080fd5b600060208284031215612901578081fd5b813561161a8161326c565b60006020828403121561291d578081fd5b815161161a8161326c565b6000806020838503121561293a578081fd5b823567ffffffffffffffff80821115612951578283fd5b818501915085601f830112612964578283fd5b813581811115612972578384fd5b8660208083028501011115612985578384fd5b60209290920196919550909350505050565b6000602082840312156129a8578081fd5b61161a82612878565b6000602082840312156129c2578081fd5b813561161a81613284565b6000602082840312156129de578081fd5b815161161a81613284565b6000602082840312156129fa578081fd5b815167ffffffffffffffff80821115612a11578283fd5b818401915084601f830112612a24578283fd5b815181811115612a3057fe5b612a43601f8201601f1916602001613218565b9150808252856020828501011115612a59578384fd5b612a6a81602084016020860161323c565b50949350505050565b600060408284031215612a84578081fd5b6040516040810181811067ffffffffffffffff82111715612aa157fe5b604052825181526020928301519281019290925250919050565b60006101a0808385031215612ace578182fd5b612ad781613218565b905082518152612ae960208401612868565b6020820152612afa60408401612888565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100808401518183015250610120808401518183015250610140808401518183015250610160612b638185016128a9565b90820152610180612b758482016128a9565b908201529392505050565b600060808284031215612b91578081fd5b50919050565b600060c08284031215612b91578081fd5b600080600080600080600080610100898b031215612bc4578384fd5b612bcd896128b4565b9750602089015180600f0b8114612be2578485fd5b80975050604089015195506060890151945060808901518060060b8114612c07578485fd5b60a08a0151909450612c188161326c565b60c08a015190935063ffffffff81168114612c31578283fd5b9150612c3f60e08a01612878565b90509295985092959890939650565b600080600080600080600060e0888a031215612c68578081fd5b8751612c738161326c565b6020890151909750612c8481613284565b9550612c92604089016128cb565b9450612ca0606089016128cb565b9350612cae608089016128cb565b925060a088015160ff81168114612cc3578182fd5b9150612cd160c08901612878565b905092959891949750929550565b600060208284031215612cf0578081fd5b5051919050565b60008060408385031215612d09578182fd5b505080516020909101519092909150565b600080600060608486031215612d2e578081fd5b8351925060208401519150604084015190509250925092565b6000806000806000806000806000806000806101808d8f031215612d69578586fd5b8c516bffffffffffffffffffffffff81168114612d84578687fd5b9b50612d9260208e01612868565b9a50612da060408e01612868565b9950612dae60608e01612868565b9850612dbc60808e016128dd565b9750612dca60a08e016128a9565b9650612dd860c08e016128a9565b9550612de660e08e016128b4565b94506101008d015193506101208d01519250612e056101408e016128b4565b9150612e146101608e016128b4565b90509295989b509295989b509295989b565b15159052565b60008151808452612e4481602086016020860161323c565b601f01601f19169290920160200192915050565b60020b9052565b6000828483379101908152919050565b6001600160a01b0391909116815260200190565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015612efe57603f19888603018452612eec858351612e2c565b94509285019290850190600101612ed0565b5092979650505050505050565b901515815260200190565b60029190910b815260200190565b60006020825261161a6020830184612e2c565b6020808252600490820152631253151160e21b604082015260600190565b602080825260049082015263424d4f4760e01b604082015260600190565b6020808252600490820152630554850360e41b604082015260600190565b6020808252600590820152640494c504d360dc1b604082015260600190565b6020808252600590820152640494c3243560dc1b604082015260600190565b60208082526004908201526324a620a960e11b604082015260600190565b60208082526005908201526424a627a7a960d91b604082015260600190565b602080825260069082015265424d4f574c4b60d01b604082015260600190565b8151815260209182015115159181019190915260400190565b81516001600160a01b0390811682526020808401519091169082015260408083015162ffffff169082015260608083015160020b9082015260808083015161010083019161309590840182612e58565b5060a083015160a083015260c083015160c083015260e083015161042f60e0840182612e26565b600060e08201905060018060a01b038084511683528060208501511660208401525062ffffff6040840151166040830152606083015160608301526080830151608083015260a083015160020b60a083015260c083015160020b60c083015292915050565b815181526020918201516001600160a01b03169181019190915260400190565b62ffffff91909116815260200190565b90815260200190565b9788526020880196909652600294850b60408801529290930b6060860152608085015260a084019190915260c083015260e08201526101000190565b978852602088019690965260408701949094526060860192909252608085015260a084015260c083015260e08201526101000190565b6000808335601e198436030181126131e2578283fd5b83018035915067ffffffffffffffff8211156131fc578283fd5b60200191503681900382131561321157600080fd5b9250929050565b60405181810167ffffffffffffffff8111828210171561323457fe5b604052919050565b60005b8381101561325757818101518382015260200161323f565b83811115613266576000848401525b50505050565b6001600160a01b038116811461328157600080fd5b50565b8060020b811461328157600080fdfea264697066735822122057f0d3cce62fedf212d58780000a09447ceb3a123f82bf1fb58d29390a2edfb564736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_registryAddressHolder": "address of the registry address holder",
          "_uniswapAddressHolder": "address of the uniswap address holder"
        }
      },
      "multicall(bytes[])": {
        "details": "The `msg.value` should not be trusted for any method callable from multicall.",
        "params": {
          "data": "The encoded function data for each of the calls to make to this contract"
        },
        "returns": {
          "results": "The results from each of the calls passed in via data"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "rebalance((address,address,uint256,uint256))": {
        "params": {
          "input": "RebalanceInput struct"
        }
      },
      "rebalanceWithTickDiffs((address,address,uint256,uint256,int24,int24))": {
        "params": {
          "input": "RebalanceWithTickDiffsInput struct"
        }
      }
    },
    "title": "Idle Liquidity Module to manage liquidity for a user position",
    "version": 1
  },
  "userdoc": {
    "events": {
      "PositionRebalanced(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "emitted when a position is rebalanced"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "assing the uniswap address holder to the contract"
      },
      "multicall(bytes[])": {
        "notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
      },
      "rebalance((address,address,uint256,uint256))": {
        "notice": "check if the position is out of range and rebalance it by swapping the tokens as necessary"
      },
      "rebalanceWithTickDiffs((address,address,uint256,uint256,int24,int24))": {
        "notice": "check if the position is out of range and rebalance it by swapping the tokens as necessary and customize lower & upper tick diff"
      },
      "uniswapAddressHolder()": {
        "notice": "uniswap address holder"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2001,
        "contract": "contracts/modules/IdleLiquidityModuleV2.sol:IdleLiquidityModuleV2",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 17879,
        "contract": "contracts/modules/IdleLiquidityModuleV2.sol:IdleLiquidityModuleV2",
        "label": "registryAddressHolder",
        "offset": 1,
        "slot": "0",
        "type": "t_contract(IRegistryAddressHolder)14471"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRegistryAddressHolder)14471": {
        "encoding": "inplace",
        "label": "contract IRegistryAddressHolder",
        "numberOfBytes": "20"
      }
    }
  }
}