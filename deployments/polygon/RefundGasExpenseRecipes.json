{
  "address": "0x8584Ecc1B2136C52b445077Db4A4794774421D92",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registryAddressHolder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "positionManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "GasExpenseRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "refundGasExpense",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registryAddressHolder",
      "outputs": [
        {
          "internalType": "contract IRegistryAddressHolder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x985d77f36b2fa82ecfdf71e115c78396a561dac46e9425a13aea81f823ddc256",
  "receipt": {
    "to": null,
    "from": "0x764d7bF1A38Cd2b9F87a787aEb13f0acB52fe784",
    "contractAddress": "0x8584Ecc1B2136C52b445077Db4A4794774421D92",
    "transactionIndex": 31,
    "gasUsed": "486975",
    "logsBloom": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000040000000000000000000000080000000000000008000000000000000000001000000000000000000000000000000000000000000000000000008001000c0000000000000000000000000000000000000000000000000000000000000020000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x2907cef1ba89d9c3ef56dcf1aca18c3deee77de2ed154e900b26df9c1264c8c8",
    "transactionHash": "0x985d77f36b2fa82ecfdf71e115c78396a561dac46e9425a13aea81f823ddc256",
    "logs": [
      {
        "transactionIndex": 31,
        "blockNumber": 50718016,
        "transactionHash": "0x985d77f36b2fa82ecfdf71e115c78396a561dac46e9425a13aea81f823ddc256",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000764d7bf1a38cd2b9f87a787aeb13f0acb52fe784",
          "0x00000000000000000000000083d69448f88bf9c701c1b93f43e1f753d39b2632"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000452a01a288bfef00000000000000000000000000000000000000000000000229304a7315946000000000000000000000000000000000000000000000000077bcf38a2588a04df100000000000000000000000000000000000000000000000228eb2071730ba011000000000000000000000000000000000000000000000077bd38b4272b290de0",
        "logIndex": 48,
        "blockHash": "0x2907cef1ba89d9c3ef56dcf1aca18c3deee77de2ed154e900b26df9c1264c8c8"
      }
    ],
    "blockNumber": 50718016,
    "cumulativeGasUsed": "1919727",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe5b481AFFFbfe1A61d762f42d4c630a5AAD388f9"
  ],
  "numDeployments": 1,
  "solcInputHash": "e0f76533d5690c320d962bc474431dde",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryAddressHolder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"positionManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GasExpenseRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"refundGasExpense\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryAddressHolder\",\"outputs\":[{\"internalType\":\"contract IRegistryAddressHolder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"refundGasExpense(uint256)\":{\"params\":{\"amount\":\"amount of gas expense to refund\"}}},\"version\":1},\"userdoc\":{\"events\":{\"GasExpenseRefunded(address,address,address,uint256)\":{\"notice\":\"emitted when gas expense is refunded\"}},\"kind\":\"user\",\"methods\":{\"refundGasExpense(uint256)\":{\"notice\":\"refund gas expense from PositionManager\"}},\"notice\":\"RefundGasExpenseRecipes allows user to refund gas expense from PositionManager\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/recipes/RefundGasExpenseRecipes.sol\":\"RefundGasExpenseRecipes\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x4c5617b558186dc4b2b994b18ab9236410cd2dd1d9ad1213bbcca2e1d5321ce8\",\"license\":\"MIT\"},\"contracts/interfaces/IPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IPositionManager {\\n    enum PositionStatus {\\n        Initial,\\n        Running,\\n        Closed\\n    }\\n    // Initial=0, Running=1, Closed=2\\n    struct PositionInfo {\\n        uint256 tokenId;\\n        address strategyProvider;\\n        bytes16 strategyId;\\n        uint256 amount0Deposited;\\n        uint256 amount1Deposited;\\n        uint256 amount0DepositedUsdValue;\\n        uint256 amount1DepositedUsdValue;\\n        uint256 amount0CollectedFee;\\n        uint256 amount1CollectedFee;\\n        uint256 amount0Leftover;\\n        uint256 amount1Leftover;\\n        int24 tickLowerDiff;\\n        int24 tickUpperDiff;\\n    }\\n\\n    struct PositionSettlement {\\n        uint256 amount0Returned;\\n        uint256 amount1Returned;\\n        uint256 amount0ReturnedUsdValue;\\n        uint256 amount1ReturnedUsdValue;\\n    }\\n\\n    ///@notice get position id counter\\n    ///@return uint256 position id counter\\n    function positionIdCounter() external view returns (uint256);\\n\\n    ///@notice get position status\\n    ///@param positionId ID of the position\\n    ///@return PositionStatus position status\\n    function positionStatus(uint256 positionId) external view returns (PositionStatus);\\n\\n    ///@notice get position settlement\\n    ///@param positionId ID of the position\\n    ///@return positionSettlementInfo PositionSettlement struct\\n    function getPositionSettlement(\\n        uint256 positionId\\n    ) external view returns (PositionSettlement memory positionSettlementInfo);\\n\\n    ///@notice create position\\n    ///@param tokenId ID of the position\\n    ///@param strategyProvider The address of the strategy provider\\n    ///@param strategyId The ID of the strategy\\n    ///@param amount0Deposited The amount of token0 deposited\\n    ///@param amount1Deposited The amount of token1 deposited\\n    ///@param amount0DepositedUsdValue The amount of token0 deposited in USD\\n    ///@param amount1DepositedUsdValue The amount of token1 deposited in USD\\n    ///@param tickLowerDiff difference between the current tick of the position and the provied lower tick\\n    ///@param tickUpperDiff difference between the current tick of the position and the provied upper tick\\n    ///@param amount0Leftover The amount of token0 leftover after rebalance\\n    ///@param amount1Leftover The amount of token1 leftover after rebalance\\n    struct CreatePositionInput {\\n        uint256 tokenId;\\n        address strategyProvider;\\n        bytes16 strategyId;\\n        uint256 amount0Deposited;\\n        uint256 amount1Deposited;\\n        uint256 amount0DepositedUsdValue;\\n        uint256 amount1DepositedUsdValue;\\n        int24 tickLowerDiff;\\n        int24 tickUpperDiff;\\n        uint256 amount0Leftover;\\n        uint256 amount1Leftover;\\n    }\\n\\n    ///@notice create position\\n    ///@param inputs CreatePositionInput struct\\n    ///@return positionId ID of the position\\n    function createPosition(CreatePositionInput calldata inputs) external returns (uint256 positionId);\\n\\n    ///@notice update position total deposit USD value\\n    ///@param positionId ID of the position\\n    ///@param amount0Deposited The amount of token0 deposited\\n    ///@param amount1Deposited The amount of token1 deposited\\n    ///@param amount0DepositedUsdValue The amount of token0 deposited in USD\\n    ///@param amount1DepositedUsdValue The amount of token1 deposited in USD\\n    ///@param amount0Leftover The amount of token0 leftover after increasing liquidity\\n    ///@param amount1Leftover The amount of token1 leftover after increasing liquidity\\n    function middlewareIncreaseLiquidity(\\n        uint256 positionId,\\n        uint256 amount0Deposited,\\n        uint256 amount1Deposited,\\n        uint256 amount0DepositedUsdValue,\\n        uint256 amount1DepositedUsdValue,\\n        uint256 amount0Leftover,\\n        uint256 amount1Leftover\\n    ) external;\\n\\n    ///@notice get positionId from tokenId\\n    ///@param tokenId ID of the position\\n    ///@return positionId ID of the position\\n    function getPositionIdFromTokenId(uint256 tokenId) external view returns (uint256);\\n\\n    ///@notice get position info from positionId\\n    ///@param positionId ID of the position\\n    ///@return positionInfo PositionInfo struct\\n    function getPositionInfo(uint256 positionId) external view returns (PositionInfo memory positionInfo);\\n\\n    ///@notice check if the position is running\\n    ///@param positionId ID of the position\\n    ///@return bool true if the position is running\\n    function isPositionRunning(uint256 positionId) external view returns (bool);\\n\\n    ///@notice middleware function to update position info for rebalance\\n    ///@param positionId ID of the position\\n    ///@param newTokenId ID of the new NFT\\n    ///@param tickLowerDiff The difference between the current tick and the tickLower\\n    ///@param tickUpperDiff The difference between the current tick and the tickUpper\\n    ///@param amount0CollectedFee The amount of token0 collected fee after rebalance\\n    ///@param amount1CollectedFee The amount of token1 collected fee after rebalance\\n    ///@param amount0Leftover The amount of token0 leftover after rebalance\\n    ///@param amount1Leftover The amount of token1 leftover after rebalance\\n    function middlewareRebalance(\\n        uint256 positionId,\\n        uint256 newTokenId,\\n        int24 tickLowerDiff,\\n        int24 tickUpperDiff,\\n        uint256 amount0CollectedFee,\\n        uint256 amount1CollectedFee,\\n        uint256 amount0Leftover,\\n        uint256 amount1Leftover\\n    ) external;\\n\\n    ///@notice struct for middleware withdraw\\n    ///@param positionId ID of the position\\n    ///@param amount0CollectedFee The amount of token0 collected fee after withdrwan\\n    ///@param amount1CollectedFee The amount of token1 collected fee after withdrwan\\n    ///@param amount0Returned The amount of token0 returned after withdrwan\\n    ///@param amount1Returned The amount of token1 returned after withdrwan\\n    ///@param amount0ReturnedUsdValue The amount of token0 returned in USD after withdrwan\\n    ///@param amount1ReturnedUsdValue The amount of token1 returned in USD after withdrwan\\n    struct MiddlewareWithdrawInput {\\n        uint256 positionId;\\n        uint256 amount0CollectedFee;\\n        uint256 amount1CollectedFee;\\n        uint256 amount0Returned;\\n        uint256 amount1Returned;\\n        uint256 amount0ReturnedUsdValue;\\n        uint256 amount1ReturnedUsdValue;\\n    }\\n\\n    ///@notice middleware function to update position info for withdraw\\n    ///@param input MiddlewareWithdrawInput struct\\n    function middlewareWithdraw(MiddlewareWithdrawInput memory input) external;\\n\\n    function setModuleData(uint256 positionId, address moduleAddress, bytes32 data) external;\\n\\n    function getPositionModuleData(uint256 _positionId, address _moduleAddress) external view returns (bytes32 data);\\n\\n    function getOwner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa27995b72b57d2a759ddce385dfac9d0efbe0db113c633a78bd5b2ade9b3d927\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IPositionManagerFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IPositionManagerFactory {\\n    function create() external returns (address);\\n\\n    function userToPositionManager(address _user) external view returns (address);\\n}\\n\",\"keccak256\":\"0xb881cf675d5e8453a56f35d3aa4eaf21479c8915479e51c9aacb6445248c4111\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IRegistry {\\n    ///@notice emitted when governance address is changed\\n    ///@param oldGovernance the old governance address\\n    ///@param newGovernance the new governance address\\n    event GovernanceChanged(address oldGovernance, address newGovernance);\\n\\n    ///@notice emitted when service fee recipient address is changed\\n    ///@param oldServiceFeeRecipient the old service fee recipient address\\n    ///@param newServiceFeeRecipient the new service fee recipient address\\n    event ServiceFeeRecipientChanged(address oldServiceFeeRecipient, address newServiceFeeRecipient);\\n\\n    ///@notice emitted when position manager factory address is changed\\n    ///@param oldPositionManagerFactory the old position manager factory address\\n    ///@param newPositionManagerFactory the new position manager factory address\\n    event PositionManagerFactoryChanged(address oldPositionManagerFactory, address newPositionManagerFactory);\\n\\n    ///@notice emitted when strategy provider wallet factory address is changed\\n    ///@param oldStrategyProviderWalletFactory the old strategy provider wallet factory address\\n    ///@param newStrategyProviderWalletFactory the new strategy provider wallet factory address\\n    event StrategyProviderWalletFactoryChanged(\\n        address oldStrategyProviderWalletFactory,\\n        address newStrategyProviderWalletFactory\\n    );\\n\\n    ///@notice emitted when official account address is changed\\n    ///@param newOfficialAccount the new official account address\\n    event OfficialAccountChanged(address oldOfficialAccount, address newOfficialAccount);\\n\\n    ///@notice emitted when a contract is added to registry\\n    ///@param newContract address of the new contract\\n    ///@param contractId keccak of contract name\\n    event ContractAdded(address newContract, bytes32 contractId);\\n\\n    ///@notice emitted when a contract address is updated\\n    ///@param oldContract address of the contract before update\\n    ///@param newContract address of the contract after update\\n    ///@param contractId keccak of contract name\\n    event ContractChanged(address oldContract, address newContract, bytes32 contractId);\\n\\n    ///@notice emitted when a contract address is removed\\n    ///@param contractAddress address of the removed contract\\n    ///@param contractId keccak of removed contract name\\n    event ContractRemoved(address contractAddress, bytes32 contractId);\\n\\n    ///@notice emitted when a keeper is added to whitelist\\n    ///@param keeper address of the added keeper\\n    event KeeperAdded(address keeper);\\n\\n    ///@notice emitted when a keeper is removed from whitelist\\n    ///@param keeper address of the removed keeper\\n    event KeeperRemoved(address keeper);\\n\\n    ///@notice emitted when a fee tier is activated\\n    ///@param feeTier fee tier activated\\n    event FeeTierActivated(uint24 feeTier);\\n\\n    ///@notice emitted when a fee tier is deactivated\\n    ///@param feeTier fee tier deactivated\\n    event FeeTierDeactivated(uint24 feeTier);\\n\\n    ///@notice emitted when service fee ratio is updated\\n    ///@param licenseAmount license amount to update service fee ratio\\n    ///@param serviceFeeRatio service fee ratio to update\\n    event ServiceFeeRatioUpdated(uint32 licenseAmount, uint32 serviceFeeRatio);\\n\\n    ///@notice emitted when usd value token address is updated\\n    ///@param oldUsdValueTokenAddress the old usd value token address\\n    ///@param newUsdValueTokenAddress the new usd value token address\\n    event UsdValueTokenAddressUpdated(address oldUsdValueTokenAddress, address newUsdValueTokenAddress);\\n\\n    ///@notice emitted when weth9 address is updated\\n    ///@param oldWeth9 the old weth9 address\\n    ///@param newWeth9 the new weth9 address\\n    event Weth9Updated(address oldWeth9, address newWeth9);\\n\\n    ///@notice emitted when max twap deviation is updated\\n    ///@param oldMaxTwapDeviation the old twap deviation\\n    ///@param newMaxTwapDeviation the new twap deviation\\n    event MaxTwapDeviationUpdated(int24 oldMaxTwapDeviation, int24 newMaxTwapDeviation);\\n\\n    ///@notice emitted when twap duration is updated\\n    ///@param oldTwapDuration the old twap duration\\n    ///@param newTwapDuration the new twap duration\\n    event TwapDurationUpdated(uint32 oldTwapDuration, uint32 newTwapDuration);\\n\\n    ///@notice emitted when module data is updated\\n    ///@param id keccak256 of module id string\\n    ///@param contractAddress address of the module\\n    ///@param defaultData default data of the module\\n    event ModuleDataUpdated(bytes32 id, address contractAddress, bytes32 defaultData);\\n\\n    struct Entry {\\n        bytes32 id;\\n        address contractAddress;\\n        bytes32 defaultData;\\n    }\\n\\n    ///@notice check if the fee tier is allowable\\n    ///@param feeTier the fee tier to check\\n    ///@return true if the fee tier is allowable, false otherwise\\n    function isAllowableFeeTier(uint24 feeTier) external view returns (bool);\\n\\n    ///@notice get the list of fee tiers\\n    ///@return array of fee tiers\\n    function getFeeTiers() external view returns (uint24[] memory);\\n\\n    ///@notice get the list of allowable fee tiers\\n    ///@return array of allowable fee tiers\\n    function getAllowableFeeTiers() external view returns (uint24[] memory);\\n\\n    ///@notice return the address of PositionManagerFactory\\n    ///@return address of PositionManagerFactory\\n    function positionManagerFactoryAddress() external view returns (address);\\n\\n    ///@notice return the address of StrategyProviderWalletFactory\\n    ///@return address of StrategyProviderWalletFactory\\n    function strategyProviderWalletFactoryAddress() external view returns (address);\\n\\n    ///@notice return the address of officialAccount\\n    ///@return address of officialAccount\\n    function officialAccount() external view returns (address);\\n\\n    ///@notice return the address of weth9\\n    ///@return address of weth9\\n    function weth9() external view returns (address);\\n\\n    ///@notice return the address of Governance\\n    ///@return address of Governance\\n    function governance() external view returns (address);\\n\\n    ///@notice return the address of recipient of service fee\\n    ///@return address of recipient of service fee\\n    function serviceFeeRecipient() external view returns (address);\\n\\n    ///@notice return the max twap deviation\\n    ///@return int24 max twap deviation\\n    function maxTwapDeviation() external view returns (int24);\\n\\n    ///@notice return the twap duration\\n    ///@return uint32 twap duration\\n    function twapDuration() external view returns (uint32);\\n\\n    ///@notice return the address of USD value token\\n    ///@return address of USD value token\\n    function usdValueTokenAddress() external view returns (address);\\n\\n    ///@notice return the denominator of service fee ratio\\n    ///@return uint32 denominator of service fee ratio\\n    function serviceFeeDenominator() external view returns (uint32);\\n\\n    ///@notice return the address of Governance\\n    ///@return address of Governance\\n    function getModuleKeys() external view returns (bytes32[] memory);\\n\\n    ///@notice checks if the address is whitelisted as a keeper\\n    ///@param _keeper address to check\\n    ///@return bool true if the address is withelisted, false otherwise\\n    function whitelistedKeepers(address _keeper) external view returns (bool);\\n\\n    ///@notice get the module info by id\\n    ///@param _id id of the module\\n    ///@return Entry module info\\n    function getModuleInfo(bytes32 _id) external view returns (Entry memory);\\n\\n    ///@notice check if the module is active\\n    ///@param _contractAddress address of the module\\n    ///@return bool true if the module is active, false otherwise\\n    function activeModule(address _contractAddress) external view returns (bool);\\n\\n    ///@notice get service fee ratio for a given license amount\\n    ///@param _licenseAmount license amount to get service fee ratio\\n    function getServiceFeeRatioFromLicenseAmount(uint32 _licenseAmount) external view returns (uint32 ratio);\\n}\\n\",\"keccak256\":\"0xcfdebc23759b625576394a17289e6690cd5e5d6da8699da8c6d36bcbc25b46ef\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/IRegistryAddressHolder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IRegistryAddressHolder {\\n    ///@notice default getter for regitsry address\\n    ///@return address The address of the registry\\n    function registry() external view returns (address);\\n\\n    ///@notice Set the address of registry\\n    ///@param newAddress new address of registry\\n    function setRegistryAddress(address newAddress) external;\\n}\\n\",\"keccak256\":\"0x5eb7fcc946db90f955527b80acaf1dbb7ce4734c215ae6c38220ccf371b70d9d\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/actions/IWithdrawNativeToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IWithdrawNativeToken {\\n    ///@notice emitted when native token withdrawn\\n    ///@param positionManager address of PositionManager\\n    ///@param receiver address of the receiver\\n    ///@param amount amount of native token withdrawn\\n    event NativeTokenWithdrawn(address indexed positionManager, address receiver, uint256 amount);\\n\\n    ///@notice struct for input of the WithdrawNativeTokenInput action\\n    ///@param amount amount of native token withdrawn\\n    ///@param receiver address of the receiver\\n    struct WithdrawNativeTokenInput {\\n        uint256 amount;\\n        address payable receiver;\\n    }\\n\\n    function withdrawNativeToken(WithdrawNativeTokenInput calldata input) external payable;\\n}\\n\",\"keccak256\":\"0x77db5dea0ab372ee3770a129e76ba4a3e6489b58c83db0822c2db478887e5fdf\",\"license\":\"GPL-2.0\"},\"contracts/interfaces/recipes/IRefundGasExpenseRecipes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IRefundGasExpenseRecipes {\\n    ///@notice emitted when gas expense is refunded\\n    ///@param positionManager address of PositionManager\\n    ///@param from address of the user\\n    ///@param receiver address of the receiver\\n    ///@param amount amount of gas expense\\n    event GasExpenseRefunded(address indexed positionManager, address from, address receiver, uint256 amount);\\n\\n    ///@notice refund gas expense\\n    ///@param amount amount of gas expense\\n    function refundGasExpense(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xa21268783de110a45cf7a8d7c7551808462c251d6e7aee6cbed1fae1c8a12236\",\"license\":\"GPL-2.0\"},\"contracts/recipes/BaseRecipes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../interfaces/IRegistryAddressHolder.sol\\\";\\nimport \\\"../interfaces/IRegistry.sol\\\";\\nimport \\\"../interfaces/IPositionManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\ncontract BaseRecipes is Pausable {\\n    IRegistryAddressHolder public immutable registryAddressHolder;\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == registry().governance(), \\\"BROG\\\");\\n        _;\\n    }\\n\\n    constructor(address _registryAddressHolder) Pausable() {\\n        require(_registryAddressHolder != address(0), \\\"BRRAH0\\\");\\n        registryAddressHolder = IRegistryAddressHolder(_registryAddressHolder);\\n    }\\n\\n    ///@notice get IRegistry from registryAddressHolder\\n    ///@return IRegistry interface of registry\\n    function registry() internal view returns (IRegistry) {\\n        return IRegistry(registryAddressHolder.registry());\\n    }\\n\\n    function pause() external onlyGovernance {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyGovernance {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x06f2cef4c56051ae66d10cec9be3bb6f14330ca68c25a00bb88fec0a654c2325\",\"license\":\"GPL-2.0\"},\"contracts/recipes/RefundGasExpenseRecipes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../interfaces/IPositionManager.sol\\\";\\nimport \\\"../interfaces/IPositionManagerFactory.sol\\\";\\nimport \\\"../interfaces/recipes/IRefundGasExpenseRecipes.sol\\\";\\nimport \\\"../interfaces/actions/IWithdrawNativeToken.sol\\\";\\nimport \\\"./BaseRecipes.sol\\\";\\n\\n///@notice RefundGasExpenseRecipes allows user to refund gas expense from PositionManager\\ncontract RefundGasExpenseRecipes is BaseRecipes, IRefundGasExpenseRecipes {\\n    constructor(address _registryAddressHolder) BaseRecipes(_registryAddressHolder) {}\\n\\n    ///@notice refund gas expense from PositionManager\\n    ///@param amount amount of gas expense to refund\\n    function refundGasExpense(uint256 amount) external override whenNotPaused {\\n        address positionManager = IPositionManagerFactory(registry().positionManagerFactoryAddress())\\n            .userToPositionManager(msg.sender);\\n        require(positionManager != address(0), \\\"RGERPM0\\\");\\n\\n        address payable receiver = payable(IPositionManager(positionManager).getOwner());\\n        ///@dev call withdrawNativeToken action\\n        IWithdrawNativeToken(positionManager).withdrawNativeToken(\\n            IWithdrawNativeToken.WithdrawNativeTokenInput({ amount: amount, receiver: receiver })\\n        );\\n\\n        emit GasExpenseRefunded(positionManager, msg.sender, receiver, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xd3e71c40d768246d135cd5201830f92d8483f247678844734710ebd8871735ee\",\"license\":\"GPL-2.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516108ae3803806108ae83398101604081905261002f9161007f565b6000805460ff19169055806001600160a01b0381166100695760405162461bcd60e51b8152600401610060906100ad565b60405180910390fd5b60601b6001600160601b031916608052506100cd565b600060208284031215610090578081fd5b81516001600160a01b03811681146100a6578182fd5b9392505050565b60208082526006908201526504252524148360d41b604082015260600190565b60805160601c6107bf6100ef6000398061022a52806104ea52506107bf6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633f4ba83a1461005c5780635c975abb146100665780638456cb5914610084578063974914d51461008c578063f5c59698146100a1575b600080fd5b6100646100b4565b005b61006e61016f565b60405161007b919061071f565b60405180910390f35b610064610178565b610094610228565b60405161007b91906106e7565b6100646100af3660046106cf565b61024c565b6100bc6104e6565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156100f457600080fd5b505afa158015610108573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012c91906106a1565b6001600160a01b0316336001600160a01b0316146101655760405162461bcd60e51b815260040161015c9061074b565b60405180910390fd5b61016d61057e565b565b60005460ff1690565b6101806104e6565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156101b857600080fd5b505afa1580156101cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f091906106a1565b6001600160a01b0316336001600160a01b0316146102205760405162461bcd60e51b815260040161015c9061074b565b61016d61061e565b7f000000000000000000000000000000000000000000000000000000000000000081565b61025461016f565b15610299576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60006102a36104e6565b6001600160a01b0316632d2c5b586040518163ffffffff1660e01b815260040160206040518083038186803b1580156102db57600080fd5b505afa1580156102ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031391906106a1565b6001600160a01b031663c81e0f91336040518263ffffffff1660e01b815260040161033e91906106e7565b60206040518083038186803b15801561035657600080fd5b505afa15801561036a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038e91906106a1565b90506001600160a01b0381166103b65760405162461bcd60e51b815260040161015c9061072a565b6000816001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156103f157600080fd5b505afa158015610405573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042991906106a1565b6040805180820182528581526001600160a01b038084166020830152915163361c721b60e11b815292935090841691636c38e4369161046a91600401610769565b600060405180830381600087803b15801561048457600080fd5b505af1158015610498573d6000803e3d6000fd5b50505050816001600160a01b03167f34ed363b51c74c0e5e8f9cbe9958158f3e5eeceb40ad9fbe9f900e15c380d7ef3383866040516104d9939291906106fb565b60405180910390a2505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637b1039996040518163ffffffff1660e01b815260040160206040518083038186803b15801561054157600080fd5b505afa158015610555573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057991906106a1565b905090565b61058661016f565b6105ce576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61060161069d565b604080516001600160a01b039092168252519081900360200190a1565b61062661016f565b1561066b576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586106015b3390565b6000602082840312156106b2578081fd5b81516001600160a01b03811681146106c8578182fd5b9392505050565b6000602082840312156106e0578081fd5b5035919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b901515815260200190565b602080825260079082015266052474552504d360cc1b604082015260600190565b60208082526004908201526342524f4760e01b604082015260600190565b815181526020918201516001600160a01b0316918101919091526040019056fea26469706673582212206dd4735a6434782435503c2a9e4e8c3f2512e464414064d8f48d6dd34c1d193964736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80633f4ba83a1461005c5780635c975abb146100665780638456cb5914610084578063974914d51461008c578063f5c59698146100a1575b600080fd5b6100646100b4565b005b61006e61016f565b60405161007b919061071f565b60405180910390f35b610064610178565b610094610228565b60405161007b91906106e7565b6100646100af3660046106cf565b61024c565b6100bc6104e6565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156100f457600080fd5b505afa158015610108573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012c91906106a1565b6001600160a01b0316336001600160a01b0316146101655760405162461bcd60e51b815260040161015c9061074b565b60405180910390fd5b61016d61057e565b565b60005460ff1690565b6101806104e6565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b1580156101b857600080fd5b505afa1580156101cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f091906106a1565b6001600160a01b0316336001600160a01b0316146102205760405162461bcd60e51b815260040161015c9061074b565b61016d61061e565b7f000000000000000000000000000000000000000000000000000000000000000081565b61025461016f565b15610299576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b60006102a36104e6565b6001600160a01b0316632d2c5b586040518163ffffffff1660e01b815260040160206040518083038186803b1580156102db57600080fd5b505afa1580156102ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031391906106a1565b6001600160a01b031663c81e0f91336040518263ffffffff1660e01b815260040161033e91906106e7565b60206040518083038186803b15801561035657600080fd5b505afa15801561036a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038e91906106a1565b90506001600160a01b0381166103b65760405162461bcd60e51b815260040161015c9061072a565b6000816001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156103f157600080fd5b505afa158015610405573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042991906106a1565b6040805180820182528581526001600160a01b038084166020830152915163361c721b60e11b815292935090841691636c38e4369161046a91600401610769565b600060405180830381600087803b15801561048457600080fd5b505af1158015610498573d6000803e3d6000fd5b50505050816001600160a01b03167f34ed363b51c74c0e5e8f9cbe9958158f3e5eeceb40ad9fbe9f900e15c380d7ef3383866040516104d9939291906106fb565b60405180910390a2505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637b1039996040518163ffffffff1660e01b815260040160206040518083038186803b15801561054157600080fd5b505afa158015610555573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057991906106a1565b905090565b61058661016f565b6105ce576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61060161069d565b604080516001600160a01b039092168252519081900360200190a1565b61062661016f565b1561066b576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586106015b3390565b6000602082840312156106b2578081fd5b81516001600160a01b03811681146106c8578182fd5b9392505050565b6000602082840312156106e0578081fd5b5035919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b901515815260200190565b602080825260079082015266052474552504d360cc1b604082015260600190565b60208082526004908201526342524f4760e01b604082015260600190565b815181526020918201516001600160a01b0316918101919091526040019056fea26469706673582212206dd4735a6434782435503c2a9e4e8c3f2512e464414064d8f48d6dd34c1d193964736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "refundGasExpense(uint256)": {
        "params": {
          "amount": "amount of gas expense to refund"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "GasExpenseRefunded(address,address,address,uint256)": {
        "notice": "emitted when gas expense is refunded"
      }
    },
    "kind": "user",
    "methods": {
      "refundGasExpense(uint256)": {
        "notice": "refund gas expense from PositionManager"
      }
    },
    "notice": "RefundGasExpenseRecipes allows user to refund gas expense from PositionManager",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2001,
        "contract": "contracts/recipes/RefundGasExpenseRecipes.sol:RefundGasExpenseRecipes",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}